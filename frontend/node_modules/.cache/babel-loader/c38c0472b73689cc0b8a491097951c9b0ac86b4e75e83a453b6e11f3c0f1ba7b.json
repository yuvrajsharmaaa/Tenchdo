{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YUVRAJ\\\\OneDrive\\\\Desktop\\\\archdo_ai_eth\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { Web3 } from 'web3';\nimport { toast } from 'react-toastify';\n\n// Import contract ABIs and addresses\nimport contractAddresses from '../contracts/addresses.json';\nimport RealEstateTokenABI from '../contracts/RealEstateToken.json';\nimport IdentityRegistryABI from '../contracts/IdentityRegistry.json';\nimport ComplianceABI from '../contracts/Compliance.json';\nimport LeaseManagerABI from '../contracts/LeaseManager.json';\nimport MockERC20ABI from '../contracts/MockERC20.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState('');\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [contracts, setContracts] = useState({});\n  const [balances, setBalances] = useState({\n    eth: '0',\n    tokens: '0',\n    usdc: '0'\n  });\n\n  // Check if MetaMask is installed\n  const isMetaMaskInstalled = () => {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n  };\n\n  // Initialize Web3 and contracts\n  const initializeWeb3 = useCallback(async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('Please install MetaMask to use this dApp');\n      return;\n    }\n    try {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n\n      // Initialize contracts with error handling\n      let realEstateToken, identityRegistry, compliance, leaseManager, mockUSDC;\n      try {\n        realEstateToken = new web3Instance.eth.Contract(RealEstateTokenABI.abi, contractAddresses.realEstateToken);\n        console.log('✅ RealEstateToken contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing RealEstateToken:', error);\n      }\n      try {\n        identityRegistry = new web3Instance.eth.Contract(IdentityRegistryABI.abi, contractAddresses.identityRegistry);\n        console.log('✅ IdentityRegistry contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing IdentityRegistry:', error);\n      }\n      try {\n        compliance = new web3Instance.eth.Contract(ComplianceABI.abi, contractAddresses.compliance);\n        console.log('✅ Compliance contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing Compliance:', error);\n      }\n      try {\n        leaseManager = new web3Instance.eth.Contract(LeaseManagerABI.abi, contractAddresses.leaseManager);\n        console.log('✅ LeaseManager contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing LeaseManager:', error);\n      }\n      try {\n        mockUSDC = new web3Instance.eth.Contract(MockERC20ABI.abi, contractAddresses.mockUSDC);\n        console.log('✅ MockUSDC contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing MockUSDC:', error);\n      }\n      setContracts({\n        realEstateToken,\n        identityRegistry,\n        compliance,\n        leaseManager,\n        mockUSDC\n      });\n      return web3Instance;\n    } catch (error) {\n      console.error('Error initializing Web3:', error);\n      toast.error('Failed to initialize Web3');\n      return null;\n    }\n  }, []);\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('Please install MetaMask');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const web3Instance = await initializeWeb3();\n      if (!web3Instance) return;\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length === 0) {\n        toast.error('No accounts found');\n        return;\n      }\n      const account = accounts[0];\n      const chainId = await web3Instance.eth.getChainId();\n      setAccount(account);\n      setChainId(Number(chainId));\n      setIsConnected(true);\n\n      // Check if we're on the correct network (localhost:8545 = chainId 1337)\n      if (Number(chainId) !== 1337) {\n        toast.warning('Please switch to the local development network (chainId: 1337)');\n      }\n      toast.success('Wallet connected successfully!');\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      toast.error('Failed to connect wallet');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount('');\n    setChainId(null);\n    setIsConnected(false);\n    setBalances({\n      eth: '0',\n      tokens: '0',\n      usdc: '0'\n    });\n    toast.info('Wallet disconnected');\n  };\n\n  // Switch to local network\n  const switchToLocalNetwork = async () => {\n    if (!isMetaMaskInstalled()) return;\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x539'\n        }] // 1337 in hex\n      });\n    } catch (error) {\n      if (error.code === 4902) {\n        // Network doesn't exist, add it\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0x539',\n              chainName: 'Localhost 8545',\n              nativeCurrency: {\n                name: 'ETH',\n                symbol: 'ETH',\n                decimals: 18\n              },\n              rpcUrls: ['http://127.0.0.1:8545'],\n              blockExplorerUrls: null\n            }]\n          });\n        } catch (addError) {\n          console.error('Error adding network:', addError);\n          toast.error('Failed to add local network');\n        }\n      } else {\n        console.error('Error switching network:', error);\n        toast.error('Failed to switch network');\n      }\n    }\n  };\n\n  // Update balances\n  const updateBalances = useCallback(async () => {\n    if (!web3 || !account || !contracts.realEstateToken || !contracts.mockUSDC) return;\n    try {\n      // ETH balance\n      const ethBalance = await web3.eth.getBalance(account);\n      const ethBalanceFormatted = web3.utils.fromWei(ethBalance, 'ether');\n\n      // Token balance\n      const tokenBalance = await contracts.realEstateToken.methods.balanceOf(account).call();\n      const tokenBalanceFormatted = web3.utils.fromWei(tokenBalance, 'ether');\n\n      // USDC balance\n      const usdcBalance = await contracts.mockUSDC.methods.balanceOf(account).call();\n      const usdcBalanceFormatted = web3.utils.fromWei(usdcBalance, 'mwei'); // USDC has 6 decimals\n\n      setBalances({\n        eth: parseFloat(ethBalanceFormatted).toFixed(4),\n        tokens: parseFloat(tokenBalanceFormatted).toFixed(4),\n        usdc: parseFloat(usdcBalanceFormatted).toFixed(2)\n      });\n    } catch (error) {\n      console.error('Error updating balances:', error);\n    }\n  }, [web3, account, contracts]);\n\n  // Check if user is verified (has KYC)\n  const isUserVerified = useCallback(async (userAddress = account) => {\n    if (!contracts.identityRegistry || !userAddress) return false;\n    try {\n      const result = await contracts.identityRegistry.methods.isVerified(userAddress).call();\n      return result;\n    } catch (error) {\n      console.error('Error checking verification status:', error);\n      // If the user is the deployer account, consider them verified by default\n      if (userAddress && userAddress.toLowerCase() === '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266') {\n        return true;\n      }\n      return false;\n    }\n  }, [contracts.identityRegistry, account]);\n\n  // Register user identity (mock KYC)\n  const registerIdentity = async (countryCode = 840) => {\n    // Default to USA\n    if (!contracts.identityRegistry || !account) return;\n    try {\n      setIsLoading(true);\n      const tx = await contracts.identityRegistry.methods.registerIdentity(account, account, countryCode).send({\n        from: account\n      });\n      toast.success('Identity registered successfully!');\n      return tx;\n    } catch (error) {\n      console.error('Error registering identity:', error);\n      toast.error('Failed to register identity');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle account changes\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n    const handleAccountsChanged = accounts => {\n      if (accounts.length === 0) {\n        disconnectWallet();\n      } else if (accounts[0] !== account) {\n        setAccount(accounts[0]);\n        toast.info('Account changed');\n      }\n    };\n    const handleChainChanged = chainId => {\n      setChainId(Number(chainId));\n      if (Number(chainId) !== 1337) {\n        toast.warning('Please switch to the local development network');\n      }\n    };\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    return () => {\n      if (window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, [account]);\n\n  // Update balances when account or contracts change\n  useEffect(() => {\n    if (isConnected && account) {\n      updateBalances();\n      const interval = setInterval(updateBalances, 10000); // Update every 10 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isConnected, account, updateBalances]);\n\n  // Initialize on mount\n  useEffect(() => {\n    if (isMetaMaskInstalled()) {\n      initializeWeb3();\n    }\n  }, [initializeWeb3]);\n  const value = {\n    web3,\n    account,\n    chainId,\n    isConnected,\n    isLoading,\n    contracts,\n    balances,\n    connectWallet,\n    disconnectWallet,\n    switchToLocalNetwork,\n    updateBalances,\n    isUserVerified,\n    registerIdentity,\n    isMetaMaskInstalled: isMetaMaskInstalled()\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n_s2(Web3Provider, \"455ULtxR8Z4iC56n6Vb3PhgQwyM=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","toast","contractAddresses","RealEstateTokenABI","IdentityRegistryABI","ComplianceABI","LeaseManagerABI","MockERC20ABI","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","context","Error","Web3Provider","children","_s2","web3","setWeb3","account","setAccount","chainId","setChainId","isConnected","setIsConnected","isLoading","setIsLoading","contracts","setContracts","balances","setBalances","eth","tokens","usdc","isMetaMaskInstalled","window","ethereum","initializeWeb3","error","web3Instance","realEstateToken","identityRegistry","compliance","leaseManager","mockUSDC","Contract","abi","console","log","connectWallet","accounts","request","method","length","getChainId","Number","warning","success","disconnectWallet","info","switchToLocalNetwork","params","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","updateBalances","ethBalance","getBalance","ethBalanceFormatted","utils","fromWei","tokenBalance","methods","balanceOf","call","tokenBalanceFormatted","usdcBalance","usdcBalanceFormatted","parseFloat","toFixed","isUserVerified","userAddress","result","isVerified","toLowerCase","registerIdentity","countryCode","tx","send","from","handleAccountsChanged","handleChainChanged","on","removeListener","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/YUVRAJ/OneDrive/Desktop/archdo_ai_eth/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { Web3 } from 'web3';\nimport { toast } from 'react-toastify';\n\n// Import contract ABIs and addresses\nimport contractAddresses from '../contracts/addresses.json';\nimport RealEstateTokenABI from '../contracts/RealEstateToken.json';\nimport IdentityRegistryABI from '../contracts/IdentityRegistry.json';\nimport ComplianceABI from '../contracts/Compliance.json';\nimport LeaseManagerABI from '../contracts/LeaseManager.json';\nimport MockERC20ABI from '../contracts/MockERC20.json';\n\nconst Web3Context = createContext();\n\nexport const useWeb3 = () => {\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n\nexport const Web3Provider = ({ children }) => {\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState('');\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [contracts, setContracts] = useState({});\n  const [balances, setBalances] = useState({\n    eth: '0',\n    tokens: '0',\n    usdc: '0'\n  });\n\n  // Check if MetaMask is installed\n  const isMetaMaskInstalled = () => {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n  };\n\n  // Initialize Web3 and contracts\n  const initializeWeb3 = useCallback(async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('Please install MetaMask to use this dApp');\n      return;\n    }\n\n    try {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n\n      // Initialize contracts with error handling\n      let realEstateToken, identityRegistry, compliance, leaseManager, mockUSDC;\n      \n      try {\n        realEstateToken = new web3Instance.eth.Contract(\n          RealEstateTokenABI.abi,\n          contractAddresses.realEstateToken\n        );\n        console.log('✅ RealEstateToken contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing RealEstateToken:', error);\n      }\n\n      try {\n        identityRegistry = new web3Instance.eth.Contract(\n          IdentityRegistryABI.abi,\n          contractAddresses.identityRegistry\n        );\n        console.log('✅ IdentityRegistry contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing IdentityRegistry:', error);\n      }\n\n      try {\n        compliance = new web3Instance.eth.Contract(\n          ComplianceABI.abi,\n          contractAddresses.compliance\n        );\n        console.log('✅ Compliance contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing Compliance:', error);\n      }\n\n      try {\n        leaseManager = new web3Instance.eth.Contract(\n          LeaseManagerABI.abi,\n          contractAddresses.leaseManager\n        );\n        console.log('✅ LeaseManager contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing LeaseManager:', error);\n      }\n\n      try {\n        mockUSDC = new web3Instance.eth.Contract(\n          MockERC20ABI.abi,\n          contractAddresses.mockUSDC\n        );\n        console.log('✅ MockUSDC contract initialized');\n      } catch (error) {\n        console.error('❌ Error initializing MockUSDC:', error);\n      }\n\n      setContracts({\n        realEstateToken,\n        identityRegistry,\n        compliance,\n        leaseManager,\n        mockUSDC\n      });\n\n      return web3Instance;\n    } catch (error) {\n      console.error('Error initializing Web3:', error);\n      toast.error('Failed to initialize Web3');\n      return null;\n    }\n  }, []);\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('Please install MetaMask');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const web3Instance = await initializeWeb3();\n      if (!web3Instance) return;\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (accounts.length === 0) {\n        toast.error('No accounts found');\n        return;\n      }\n\n      const account = accounts[0];\n      const chainId = await web3Instance.eth.getChainId();\n\n      setAccount(account);\n      setChainId(Number(chainId));\n      setIsConnected(true);\n\n      // Check if we're on the correct network (localhost:8545 = chainId 1337)\n      if (Number(chainId) !== 1337) {\n        toast.warning('Please switch to the local development network (chainId: 1337)');\n      }\n\n      toast.success('Wallet connected successfully!');\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      toast.error('Failed to connect wallet');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount('');\n    setChainId(null);\n    setIsConnected(false);\n    setBalances({ eth: '0', tokens: '0', usdc: '0' });\n    toast.info('Wallet disconnected');\n  };\n\n  // Switch to local network\n  const switchToLocalNetwork = async () => {\n    if (!isMetaMaskInstalled()) return;\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x539' }], // 1337 in hex\n      });\n    } catch (error) {\n      if (error.code === 4902) {\n        // Network doesn't exist, add it\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: '0x539',\n                chainName: 'Localhost 8545',\n                nativeCurrency: {\n                  name: 'ETH',\n                  symbol: 'ETH',\n                  decimals: 18,\n                },\n                rpcUrls: ['http://127.0.0.1:8545'],\n                blockExplorerUrls: null,\n              },\n            ],\n          });\n        } catch (addError) {\n          console.error('Error adding network:', addError);\n          toast.error('Failed to add local network');\n        }\n      } else {\n        console.error('Error switching network:', error);\n        toast.error('Failed to switch network');\n      }\n    }\n  };\n\n  // Update balances\n  const updateBalances = useCallback(async () => {\n    if (!web3 || !account || !contracts.realEstateToken || !contracts.mockUSDC) return;\n\n    try {\n      // ETH balance\n      const ethBalance = await web3.eth.getBalance(account);\n      const ethBalanceFormatted = web3.utils.fromWei(ethBalance, 'ether');\n\n      // Token balance\n      const tokenBalance = await contracts.realEstateToken.methods.balanceOf(account).call();\n      const tokenBalanceFormatted = web3.utils.fromWei(tokenBalance, 'ether');\n\n      // USDC balance\n      const usdcBalance = await contracts.mockUSDC.methods.balanceOf(account).call();\n      const usdcBalanceFormatted = web3.utils.fromWei(usdcBalance, 'mwei'); // USDC has 6 decimals\n\n      setBalances({\n        eth: parseFloat(ethBalanceFormatted).toFixed(4),\n        tokens: parseFloat(tokenBalanceFormatted).toFixed(4),\n        usdc: parseFloat(usdcBalanceFormatted).toFixed(2)\n      });\n    } catch (error) {\n      console.error('Error updating balances:', error);\n    }\n  }, [web3, account, contracts]);\n\n  // Check if user is verified (has KYC)\n  const isUserVerified = useCallback(async (userAddress = account) => {\n    if (!contracts.identityRegistry || !userAddress) return false;\n\n    try {\n      const result = await contracts.identityRegistry.methods.isVerified(userAddress).call();\n      return result;\n    } catch (error) {\n      console.error('Error checking verification status:', error);\n      // If the user is the deployer account, consider them verified by default\n      if (userAddress && userAddress.toLowerCase() === '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266') {\n        return true;\n      }\n      return false;\n    }\n  }, [contracts.identityRegistry, account]);\n\n  // Register user identity (mock KYC)\n  const registerIdentity = async (countryCode = 840) => { // Default to USA\n    if (!contracts.identityRegistry || !account) return;\n\n    try {\n      setIsLoading(true);\n      const tx = await contracts.identityRegistry.methods\n        .registerIdentity(account, account, countryCode)\n        .send({ from: account });\n      \n      toast.success('Identity registered successfully!');\n      return tx;\n    } catch (error) {\n      console.error('Error registering identity:', error);\n      toast.error('Failed to register identity');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle account changes\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n\n    const handleAccountsChanged = (accounts) => {\n      if (accounts.length === 0) {\n        disconnectWallet();\n      } else if (accounts[0] !== account) {\n        setAccount(accounts[0]);\n        toast.info('Account changed');\n      }\n    };\n\n    const handleChainChanged = (chainId) => {\n      setChainId(Number(chainId));\n      if (Number(chainId) !== 1337) {\n        toast.warning('Please switch to the local development network');\n      }\n    };\n\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n\n    return () => {\n      if (window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, [account]);\n\n  // Update balances when account or contracts change\n  useEffect(() => {\n    if (isConnected && account) {\n      updateBalances();\n      const interval = setInterval(updateBalances, 10000); // Update every 10 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isConnected, account, updateBalances]);\n\n  // Initialize on mount\n  useEffect(() => {\n    if (isMetaMaskInstalled()) {\n      initializeWeb3();\n    }\n  }, [initializeWeb3]);\n\n  const value = {\n    web3,\n    account,\n    chainId,\n    isConnected,\n    isLoading,\n    contracts,\n    balances,\n    connectWallet,\n    disconnectWallet,\n    switchToLocalNetwork,\n    updateBalances,\n    isUserVerified,\n    registerIdentity,\n    isMetaMaskInstalled: isMetaMaskInstalled()\n  };\n\n  return (\n    <Web3Context.Provider value={value}>\n      {children}\n    </Web3Context.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}