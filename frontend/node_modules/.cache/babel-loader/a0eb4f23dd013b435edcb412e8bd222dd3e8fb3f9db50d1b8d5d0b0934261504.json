{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter, bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\nconst {\n  buf: crc32Uint8Array\n} = pkg;\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `web3-utils/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(chainParamsOrName, opts = {}) {\n    var _a;\n    const baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n    const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));\n    standardChainParams.name = 'custom-chain';\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common(Object.assign({\n        chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName)\n      }, opts));\n    }\n    if (chainParamsOrName === CustomChain.PolygonMainnet) {\n      return Common.custom({\n        name: CustomChain.PolygonMainnet,\n        chainId: 137,\n        networkId: 137\n      }, opts);\n    }\n    if (chainParamsOrName === CustomChain.PolygonMumbai) {\n      return Common.custom({\n        name: CustomChain.PolygonMumbai,\n        chainId: 80001,\n        networkId: 80001\n      }, opts);\n    }\n    if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n      return Common.custom({\n        name: CustomChain.ArbitrumRinkebyTestnet,\n        chainId: 421611,\n        networkId: 421611\n      }, opts);\n    }\n    if (chainParamsOrName === CustomChain.ArbitrumOne) {\n      return Common.custom({\n        name: CustomChain.ArbitrumOne,\n        chainId: 42161,\n        networkId: 42161\n      }, opts);\n    }\n    if (chainParamsOrName === CustomChain.xDaiChain) {\n      return Common.custom({\n        name: CustomChain.xDaiChain,\n        chainId: 100,\n        networkId: 100\n      }, opts);\n    }\n    if (chainParamsOrName === CustomChain.OptimisticKovan) {\n      return Common.custom({\n        name: CustomChain.OptimisticKovan,\n        chainId: 69,\n        networkId: 69\n      }, Object.assign({\n        hardfork: Hardfork.Berlin\n      }, opts));\n    }\n    if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n      return Common.custom({\n        name: CustomChain.OptimisticEthereum,\n        chainId: 10,\n        networkId: 10\n      }, Object.assign({\n        hardfork: Hardfork.Berlin\n      }, opts));\n    }\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n  }\n  /**\n   * Static method to load and set common from a geth genesis json\n   * @param genesisJson json of geth configuration\n   * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n   * @returns Common\n   */\n  static fromGethGenesis(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  genesisJson, {\n    chain,\n    eips,\n    genesisHash,\n    hardfork,\n    mergeForkIdPostMerge\n  }) {\n    var _a;\n    const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n    const common = new Common({\n      chain: (_a = genesisParams.name) !== null && _a !== void 0 ? _a : 'custom',\n      customChains: [genesisParams],\n      eips,\n      hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork\n    });\n    if (genesisHash !== undefined) {\n      common.setForkHashes(genesisHash);\n    }\n    return common;\n  }\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId bigint id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId) {\n    const initializedChains = this._getInitializedChains();\n    return Boolean(initializedChains.names[chainId.toString()]);\n  }\n  static _getChainParams(_chain, customChains) {\n    let chain = _chain;\n    const initializedChains = this._getInitializedChains(customChains);\n    if (typeof chain === 'number' || typeof chain === 'bigint') {\n      chain = chain.toString();\n      if (initializedChains.names[chain]) {\n        const name = initializedChains.names[chain];\n        return initializedChains[name];\n      }\n      throw new Error(`Chain with ID ${chain} not supported`);\n    }\n    if (initializedChains[chain] !== undefined) {\n      return initializedChains[chain];\n    }\n    throw new Error(`Chain with name ${chain} not supported`);\n  }\n  constructor(opts) {\n    var _a, _b;\n    super();\n    this._eips = [];\n    this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];\n    this._chainParams = this.setChain(opts.chain);\n    this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Merge;\n    // Assign hardfork changes in the sequence of the applied hardforks\n    this.HARDFORK_CHANGES = this.hardforks().map(hf => [hf.name, HARDFORK_SPECS[hf.name]]);\n    this._hardfork = this.DEFAULT_HARDFORK;\n    if (opts.hardfork !== undefined) {\n      this.setHardfork(opts.hardfork);\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips);\n    }\n  }\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain representation.\n   *              Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain) {\n    if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain, this._customChains);\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n      for (const param of required) {\n        if (!(param in chain)) {\n          throw new Error(`Missing required chain parameter: ${param}`);\n        }\n      }\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n    for (const hf of this.hardforks()) {\n      if (hf.block === undefined) {\n        throw new Error(`Hardfork cannot have undefined block number`);\n      }\n    }\n    return this._chainParams;\n  }\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork) {\n    let existing = false;\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork;\n          this.emit('hardforkChanged', hardfork);\n        }\n        existing = true;\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`);\n    }\n  }\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n   * @param timestamp: timestamp in seconds at which block was/is to be minted\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const td = toType(_td, TypeOutput.BigInt);\n    const timestamp = toType(_timestamp, TypeOutput.Number);\n    // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n    const hfs = this.hardforks().filter(hf =>\n    // eslint-disable-next-line no-null/no-null\n    hf.block !== null ||\n    // eslint-disable-next-line no-null/no-null\n    hf.ttd !== null && hf.ttd !== undefined || hf.timestamp !== undefined);\n    // eslint-disable-next-line no-null/no-null\n    const mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n    const doubleTTDHF = hfs.slice(mergeIndex + 1)\n    // eslint-disable-next-line no-null/no-null\n    .findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n    if (doubleTTDHF >= 0) {\n      throw Error(`More than one merge hardforks found with ttd specified`);\n    }\n    // Find the first hardfork that has a block number greater than `blockNumber`\n    // (skips the merge hardfork since it cannot have a block number specified).\n    // If timestamp is not provided, it also skips timestamps hardforks to continue\n    // discovering/checking number hardforks.\n    let hfIndex = hfs.findIndex(hf =>\n    // eslint-disable-next-line no-null/no-null\n    hf.block !== null && hf.block > blockNumber || timestamp !== undefined && Number(hf.timestamp) > timestamp);\n    if (hfIndex === -1) {\n      // all hardforks apply, set hfIndex to the last one as that's the candidate\n      hfIndex = hfs.length;\n    } else if (hfIndex === 0) {\n      // cannot have a case where a block number is before all applied hardforks\n      // since the chain has to start with a hardfork\n      throw Error('Must have at least one hardfork at block 0');\n    }\n    // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n    if (timestamp === undefined) {\n      const stepBack = hfs.slice(0, hfIndex).reverse()\n      // eslint-disable-next-line no-null/no-null\n      .findIndex(hf => hf.block !== null || hf.ttd !== undefined);\n      hfIndex -= stepBack;\n    }\n    // Move hfIndex one back to arrive at candidate hardfork\n    hfIndex -= 1;\n    // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n    // hardforks. so it will now be needed to rollback\n    // eslint-disable-next-line no-null/no-null\n    if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n      // We're on the merge hardfork.  Let's check the TTD\n      // eslint-disable-next-line no-null/no-null\n      if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n        // Merge ttd greater than current td so we're on hardfork before merge\n        hfIndex -= 1;\n      }\n      // eslint-disable-next-line no-null/no-null\n    } else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n      if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n        throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n      } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {\n        throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n      }\n    }\n    const hfStartIndex = hfIndex;\n    // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n    // This won't anyway be the case with Merge hfs\n    for (; hfIndex < hfs.length - 1; hfIndex += 1) {\n      // break out if hfIndex + 1 is not scheduled at hfIndex\n      if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n        break;\n      }\n    }\n    if (timestamp) {\n      const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf) => {\n        var _a;\n        return Math.max(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : '0'), acc);\n      }, 0);\n      if (minTimeStamp > timestamp) {\n        throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n      }\n      const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf) => {\n        var _a;\n        return Math.min(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : timestamp), acc);\n      }, timestamp);\n      if (maxTimeStamp < timestamp) {\n        throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n      }\n    }\n    const hardfork = hfs[hfIndex];\n    return hardfork.name;\n  }\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @param timestamp\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(blockNumber, td, timestamp) {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n    this.setHardfork(hardfork);\n    return hardfork;\n  }\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params or null if hardfork not on chain\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  _getHardfork(hardfork) {\n    const hfs = this.hardforks();\n    for (const hf of hfs) {\n      if (hf.name === hardfork) return hf;\n    }\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n      const minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n      if (!minHF) {\n        throw new Error(\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (EIPs[eip].requiredEIPs !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        for (const elem of EIPs[eip].requiredEIPs) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `${eip} requires EIP ${elem}, but is not included in the EIP list`);\n          }\n        }\n      }\n    }\n    this._eips = eips;\n  }\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precedence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n  param(topic, name) {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value;\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip);\n      if (value !== undefined) return value;\n    }\n    return this.paramByHardfork(topic, name, this._hardfork);\n  }\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n  paramByHardfork(topic, name, hardfork) {\n    // eslint-disable-next-line no-null/no-null\n    let value = null;\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        const hfEIPs = hfChanges[1].eips;\n        for (const eip of hfEIPs) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          const valueEIP = this.paramByEIP(topic, name, eip);\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          value = typeof valueEIP === 'bigint' ? valueEIP : value;\n        }\n        // Parameter-inlining HF file (e.g. istanbul.json)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (hfChanges[1][topic] === undefined) {\n          throw new Error(`Topic ${topic} not defined`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (hfChanges[1][topic][name] !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n          value = hfChanges[1][topic][name].v;\n        }\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return BigInt(value !== null && value !== void 0 ? value : 0);\n  }\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `undefined` if not found\n   */\n  // eslint-disable-next-line class-methods-use-this\n  paramByEIP(topic, name, eip) {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const eipParams = EIPs[eip];\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (eipParams[topic][name] === undefined) {\n      return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n    const value = eipParams[topic][name].v;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return BigInt(value);\n  }\n  /**\n   * Returns a parameter for the hardfork active on block number or\n   * optional provided total difficulty (Merge HF)\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   * @param td Total difficulty\n   *    * @returns The value requested or `BigInt(0)` if not found\n   */\n  paramByBlock(topic, name, blockNumber, td, timestamp) {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n    return this.paramByHardfork(topic, name, hardfork);\n  }\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip) {\n    if (this.eips().includes(eip)) {\n      return true;\n    }\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const hf = hfChanges[1];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n      if (this.gteHardfork(hf.name) && 'eips' in hf) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (hf.eips.includes(eip)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  _hardfork, _blockNumber) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const hfBlock = this.hardforkBlock(hardfork);\n    if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber) {\n    // eslint-disable-next-line no-null/no-null\n    return this.hardforkIsActiveOnBlock(null, blockNumber);\n  }\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  _hardfork1, hardfork2) {\n    const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;\n    const hardforks = this.hardforks();\n    let posHf1 = -1;\n    let posHf2 = -1;\n    let index = 0;\n    for (const hf of hardforks) {\n      if (hf.name === hardfork1) posHf1 = index;\n      if (hf.name === hardfork2) posHf2 = index;\n      index += 1;\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1;\n  }\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork) {\n    // eslint-disable-next-line no-null/no-null\n    return this.hardforkGteHardfork(null, hardfork);\n  }\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  hardforkBlock(_hardfork) {\n    var _a;\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const block = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.block;\n    // eslint-disable-next-line no-null/no-null\n    if (block === undefined || block === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    return BigInt(block);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  hardforkTimestamp(_hardfork) {\n    var _a;\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const timestamp = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.timestamp;\n    // eslint-disable-next-line no-null/no-null\n    if (timestamp === undefined || timestamp === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    return BigInt(timestamp);\n  }\n  /**\n   * Returns the hardfork change block for eip\n   * @param eip EIP number\n   * @returns Block number or null if unscheduled\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eipBlock(eip) {\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const hf = hfChanges[1];\n      if ('eips' in hf) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        if (hf.eips.includes(eip)) {\n          return this.hardforkBlock(typeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0]);\n        }\n      }\n    }\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  hardforkTTD(_hardfork) {\n    var _a;\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const ttd = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.ttd;\n    // eslint-disable-next-line no-null/no-null\n    if (ttd === undefined || ttd === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    return BigInt(ttd);\n  }\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n  isHardforkBlock(_blockNumber, _hardfork) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const block = this.hardforkBlock(hardfork);\n    return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n  }\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block timestamp, number or null if not available\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  nextHardforkBlockOrTimestamp(_hardfork) {\n    var _a, _b, _c;\n    const hardfork = (_a = _hardfork) !== null && _a !== void 0 ? _a : this._hardfork;\n    const hfs = this.hardforks();\n    let hfIndex = hfs.findIndex(hf => hf.name === hardfork);\n    // If the current hardfork is merge, go one behind as merge hf is not part of these\n    // calcs even if the merge hf block is set\n    if (hardfork === Hardfork.Merge) {\n      hfIndex -= 1;\n    }\n    // Hardfork not found\n    if (hfIndex < 0) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    let currHfTimeOrBlock = (_b = hfs[hfIndex].timestamp) !== null && _b !== void 0 ? _b : hfs[hfIndex].block;\n    currHfTimeOrBlock =\n    // eslint-disable-next-line no-null/no-null\n    currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined ? Number(currHfTimeOrBlock) :\n    // eslint-disable-next-line no-null/no-null\n    null;\n    const nextHf = hfs.slice(hfIndex + 1).find(hf => {\n      var _a;\n      let hfTimeOrBlock = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n      hfTimeOrBlock =\n      // eslint-disable-next-line no-null/no-null\n      hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) :\n      // eslint-disable-next-line no-null/no-null\n      null;\n      return hf.name !== Hardfork.Merge &&\n      // eslint-disable-next-line no-null/no-null\n      hfTimeOrBlock !== null && hfTimeOrBlock !== undefined && hfTimeOrBlock !== currHfTimeOrBlock;\n    });\n    // If no next hf found with valid block or timestamp return null\n    if (nextHf === undefined) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    const nextHfBlock = (_c = nextHf.timestamp) !== null && _c !== void 0 ? _c : nextHf.block;\n    // eslint-disable-next-line no-null/no-null\n    if (nextHfBlock === null || nextHfBlock === undefined) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    return BigInt(nextHfBlock);\n  }\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  nextHardforkBlock(_hardfork) {\n    var _a;\n    const hardfork = (_a = _hardfork) !== null && _a !== void 0 ? _a : this._hardfork;\n    let hfBlock = this.hardforkBlock(hardfork);\n    // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n    // to find the nextHardforkBlock\n    // eslint-disable-next-line no-null/no-null\n    if (hfBlock === null && hardfork === Hardfork.Merge) {\n      const hfs = this.hardforks();\n      // eslint-disable-next-line no-null/no-null\n      const mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n      if (mergeIndex < 0) {\n        throw Error(`Merge hardfork should have been found`);\n      }\n      hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n    }\n    // eslint-disable-next-line no-null/no-null\n    if (hfBlock === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    // eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n    const nextHfBlock = this.hardforks().reduce((acc, hf) => {\n      // We need to ignore the merge block in our next hardfork calc\n      const block = BigInt(\n      // eslint-disable-next-line no-null/no-null\n      hf.block === null || hf.ttd !== undefined && hf.ttd !== null ? 0 : hf.block);\n      // TypeScript can't seem to follow that the hfBlock is not null at this point\n      // eslint-disable-next-line no-null/no-null\n      return block > hfBlock && acc === null ? block : acc;\n      // eslint-disable-next-line no-null/no-null\n    }, null);\n    return nextHfBlock;\n  }\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n  isNextHardforkBlock(_blockNumber, _hardfork) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    // eslint-disable-next-line deprecation/deprecation\n    const nextHardforkBlock = this.nextHardforkBlock(hardfork);\n    // eslint-disable-next-line no-null/no-null\n    return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n  }\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @param genesisHash Genesis block hash of the chain\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork, genesisHash) {\n    let hfUint8Array = new Uint8Array();\n    let prevBlockOrTime = 0;\n    for (const hf of this.hardforks()) {\n      const {\n        block,\n        timestamp,\n        name\n      } = hf;\n      // Timestamp to be used for timestamp based hfs even if we may bundle\n      // block number with them retrospectively\n      let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;\n      // eslint-disable-next-line no-null/no-null\n      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same blockOrTime HFs\n      // and on the merge since forkhash doesn't change on merge hf\n      if (typeof blockOrTime === 'number' && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== Hardfork.Merge) {\n        const hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n        hfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n        prevBlockOrTime = blockOrTime;\n      }\n      if (hf.name === hardfork) break;\n    }\n    const inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    // eslint-disable-next-line no-bitwise\n    const forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n    return forkhash;\n  }\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n   */\n  forkHash(_hardfork, genesisHash) {\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const data = this._getHardfork(hardfork);\n    if (\n    // eslint-disable-next-line no-null/no-null\n    data === null ||\n    // eslint-disable-next-line no-null/no-null\n    (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === undefined && (data === null || data === void 0 ? void 0 : data.ttd) === undefined) {\n      const msg = 'No fork hash calculation possible for future hardfork';\n      throw new Error(msg);\n    }\n    // eslint-disable-next-line no-null/no-null\n    if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== undefined) {\n      return data.forkHash;\n    }\n    if (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n    return this._calcForkHash(hardfork, genesisHash);\n  }\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  hardforkForForkHash(forkHash) {\n    const resArray = this.hardforks().filter(hf => hf.forkHash === forkHash);\n    // eslint-disable-next-line no-null/no-null\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n  }\n  /**\n   * Sets any missing forkHashes on the passed-in {@link Common} instance\n   * @param common The {@link Common} to set the forkHashes for\n   * @param genesisHash The genesis block hash\n   */\n  setForkHashes(genesisHash) {\n    var _a;\n    for (const hf of this.hardforks()) {\n      const blockOrTime = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n      if (\n      // eslint-disable-next-line no-null/no-null\n      (hf.forkHash === null || hf.forkHash === undefined) && (\n      // eslint-disable-next-line no-null/no-null\n      blockOrTime !== null && blockOrTime !== undefined || typeof hf.ttd !== 'undefined')) {\n        hf.forkHash = this.forkHash(hf.name, genesisHash);\n      }\n    }\n  }\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis() {\n    return this._chainParams.genesis;\n  }\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks() {\n    return this._chainParams.hardforks;\n  }\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes() {\n    return this._chainParams.bootstrapNodes;\n  }\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks() {\n    return this._chainParams.dnsNetworks;\n  }\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork() {\n    return this._hardfork;\n  }\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainId() {\n    return BigInt(this._chainParams.chainId);\n  }\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName() {\n    return this._chainParams.name;\n  }\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkId() {\n    return BigInt(this._chainParams.networkId);\n  }\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips() {\n    return this._eips;\n  }\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusType() {\n    const hardfork = this.hardfork();\n    let value;\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        value = hfChanges[1].consensus.type;\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;\n  }\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusAlgorithm() {\n    const hardfork = this.hardfork();\n    let value;\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        value = hfChanges[1].consensus.algorithm;\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;\n  }\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: empty object\n   * clique: period, epoch\n   * casper: empty object\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusConfig() {\n    var _a;\n    const hardfork = this.hardfork();\n    let value;\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (_a = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a !== void 0 ? _a : {};\n  }\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    copy.removeAllListeners();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return copy;\n  }\n  static _getInitializedChains(customChains) {\n    const names = {};\n    for (const [name, id] of Object.entries(Chain)) {\n      names[id] = name.toLowerCase();\n    }\n    const chains = {\n      mainnet,\n      goerli,\n      sepolia\n    };\n    if (customChains) {\n      for (const chain of customChains) {\n        const {\n          name\n        } = chain;\n        names[chain.chainId.toString()] = name;\n        chains[name] = chain;\n      }\n    }\n    chains.names = names;\n    return chains;\n  }\n}","map":{"version":3,"names":["pkg","EventEmitter","bytesToHex","hexToBytes","uint8ArrayConcat","TypeOutput","intToUint8Array","toType","parseGethGenesis","goerli","mainnet","sepolia","EIPs","Chain","CustomChain","Hardfork","hardforks","HARDFORK_SPECS","buf","crc32Uint8Array","Common","custom","chainParamsOrName","opts","baseChain","_a","standardChainParams","Object","assign","_getChainParams","name","chain","PolygonMainnet","chainId","networkId","PolygonMumbai","ArbitrumRinkebyTestnet","ArbitrumOne","xDaiChain","OptimisticKovan","hardfork","Berlin","OptimisticEthereum","Error","fromGethGenesis","genesisJson","eips","genesisHash","mergeForkIdPostMerge","genesisParams","common","customChains","undefined","setForkHashes","isSupportedChainId","initializedChains","_getInitializedChains","Boolean","names","toString","_chain","constructor","_eips","_customChains","_chainParams","setChain","DEFAULT_HARDFORK","_b","defaultHardfork","Merge","HARDFORK_CHANGES","map","hf","_hardfork","setHardfork","setEIPs","length","required","param","block","existing","hfChanges","emit","getHardforkByBlockNumber","_blockNumber","_td","_timestamp","blockNumber","BigInt","td","timestamp","Number","hfs","filter","ttd","mergeIndex","findIndex","doubleTTDHF","slice","hfIndex","stepBack","reverse","hfStartIndex","minTimeStamp","reduce","acc","Math","max","maxTimeStamp","min","setHardforkByBlockNumber","_getHardfork","eip","minHF","gteHardfork","minimumHardfork","requiredEIPs","elem","includes","isActivatedEIP","topic","value","paramByEIP","paramByHardfork","hfEIPs","valueEIP","v","eipParams","paramByBlock","hardforkIsActiveOnBlock","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","_hardfork1","hardfork2","hardfork1","posHf1","posHf2","index","hardforkTimestamp","eipBlock","String","hardforkTTD","isHardforkBlock","nextHardforkBlockOrTimestamp","currHfTimeOrBlock","nextHf","find","hfTimeOrBlock","nextHfBlock","_c","nextHardforkBlock","isNextHardforkBlock","_calcForkHash","hfUint8Array","Uint8Array","prevBlockOrTime","blockOrTime","hfBlockUint8Array","padStart","inputUint8Array","forkhash","forkHash","data","msg","hardforkForForkHash","resArray","genesis","bootstrapNodes","dnsNetworks","chainName","consensusType","consensus","type","consensusAlgorithm","algorithm","consensusConfig","copy","create","getPrototypeOf","removeAllListeners","id","entries","toLowerCase","chains"],"sources":["C:\\Users\\YUVRAJ\\OneDrive\\Desktop\\archdo_ai_eth\\frontend\\node_modules\\web3-eth-accounts\\src\\common\\common.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter, bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport type { Numbers } from 'web3-types';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport type { ConsensusAlgorithm, ConsensusType } from './enums.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\n\nimport type {\n\tBootstrapNodeConfig,\n\tCasperConfig,\n\tChainConfig,\n\tChainName,\n\tChainsConfig,\n\tCliqueConfig,\n\tCommonOpts,\n\tCustomCommonOpts,\n\tEthashConfig,\n\tGenesisBlockConfig,\n\tGethConfigOpts,\n\tHardforkConfig,\n} from './types.js';\n\nconst { buf: crc32Uint8Array } = pkg;\n\ntype HardforkSpecKeys = keyof typeof HARDFORK_SPECS;\ntype HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys];\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n\tpublic readonly DEFAULT_HARDFORK: string | Hardfork;\n\n\tprivate _chainParams: ChainConfig;\n\tprivate _hardfork: string | Hardfork;\n\tprivate _eips: number[] = [];\n\tprivate readonly _customChains: ChainConfig[];\n\n\tprivate readonly HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][];\n\n\t/**\n\t * Creates a {@link Common} object for a custom chain, based on a standard one.\n\t *\n\t * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n\t * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n\t *\n\t * ```javascript\n\t * Common.custom({chainId: 123})\n\t * ```\n\t *\n\t * There are also selected supported custom chains which can be initialized by using one of the\n\t * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n\t *\n\t * ```javascript\n\t * Common.custom(CustomChains.MaticMumbai)\n\t * ```\n\t *\n\t * Note that these supported custom chains only provide some base parameters (usually the chain and\n\t * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n\t * the `web3-utils/tx` library to a Layer-2 chain).\n\t *\n\t * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n\t * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n\t */\n\tpublic static custom(\n\t\tchainParamsOrName: Partial<ChainConfig> | CustomChain,\n\t\topts: CustomCommonOpts = {},\n\t): Common {\n\t\tconst baseChain = opts.baseChain ?? 'mainnet';\n\t\tconst standardChainParams = { ...Common._getChainParams(baseChain) };\n\t\tstandardChainParams.name = 'custom-chain';\n\n\t\tif (typeof chainParamsOrName !== 'string') {\n\t\t\treturn new Common({\n\t\t\t\tchain: {\n\t\t\t\t\t...standardChainParams,\n\t\t\t\t\t...chainParamsOrName,\n\t\t\t\t},\n\t\t\t\t...opts,\n\t\t\t});\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMainnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMainnet,\n\t\t\t\t\tchainId: 137,\n\t\t\t\t\tnetworkId: 137,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMumbai) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMumbai,\n\t\t\t\t\tchainId: 80001,\n\t\t\t\t\tnetworkId: 80001,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumRinkebyTestnet,\n\t\t\t\t\tchainId: 421611,\n\t\t\t\t\tnetworkId: 421611,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumOne) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumOne,\n\t\t\t\t\tchainId: 42161,\n\t\t\t\t\tnetworkId: 42161,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.xDaiChain) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.xDaiChain,\n\t\t\t\t\tchainId: 100,\n\t\t\t\t\tnetworkId: 100,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticKovan) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticKovan,\n\t\t\t\t\tchainId: 69,\n\t\t\t\t\tnetworkId: 69,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticEthereum) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticEthereum,\n\t\t\t\t\tchainId: 10,\n\t\t\t\t\tnetworkId: 10,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Custom chain ${chainParamsOrName} not supported`);\n\t}\n\n\t/**\n\t * Static method to load and set common from a geth genesis json\n\t * @param genesisJson json of geth configuration\n\t * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n\t * @returns Common\n\t */\n\tpublic static fromGethGenesis(\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tgenesisJson: any,\n\t\t{ chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts,\n\t): Common {\n\t\tconst genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n\t\tconst common = new Common({\n\t\t\tchain: genesisParams.name ?? 'custom',\n\t\t\tcustomChains: [genesisParams],\n\t\t\teips,\n\t\t\thardfork: hardfork ?? genesisParams.hardfork,\n\t\t});\n\t\tif (genesisHash !== undefined) {\n\t\t\tcommon.setForkHashes(genesisHash);\n\t\t}\n\t\treturn common;\n\t}\n\n\t/**\n\t * Static method to determine if a {@link chainId} is supported as a standard chain\n\t * @param chainId bigint id (`1`) of a standard chain\n\t * @returns boolean\n\t */\n\tpublic static isSupportedChainId(chainId: bigint): boolean {\n\t\tconst initializedChains = this._getInitializedChains();\n\t\treturn Boolean((initializedChains.names as ChainName)[chainId.toString()]);\n\t}\n\n\tprivate static _getChainParams(\n\t\t_chain: string | number | Chain | bigint,\n\t\tcustomChains?: ChainConfig[],\n\t): ChainConfig {\n\t\tlet chain = _chain;\n\t\tconst initializedChains = this._getInitializedChains(customChains);\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint') {\n\t\t\tchain = chain.toString();\n\n\t\t\tif ((initializedChains.names as ChainName)[chain]) {\n\t\t\t\tconst name: string = (initializedChains.names as ChainName)[chain];\n\t\t\t\treturn initializedChains[name] as ChainConfig;\n\t\t\t}\n\n\t\t\tthrow new Error(`Chain with ID ${chain} not supported`);\n\t\t}\n\n\t\tif (initializedChains[chain] !== undefined) {\n\t\t\treturn initializedChains[chain] as ChainConfig;\n\t\t}\n\n\t\tthrow new Error(`Chain with name ${chain} not supported`);\n\t}\n\n\tpublic constructor(opts: CommonOpts) {\n\t\tsuper();\n\t\tthis._customChains = opts.customChains ?? [];\n\t\tthis._chainParams = this.setChain(opts.chain);\n\t\tthis.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Merge;\n\t\t// Assign hardfork changes in the sequence of the applied hardforks\n\t\tthis.HARDFORK_CHANGES = this.hardforks().map(hf => [\n\t\t\thf.name as HardforkSpecKeys,\n\t\t\tHARDFORK_SPECS[hf.name as HardforkSpecKeys],\n\t\t]);\n\t\tthis._hardfork = this.DEFAULT_HARDFORK;\n\t\tif (opts.hardfork !== undefined) {\n\t\t\tthis.setHardfork(opts.hardfork);\n\t\t}\n\t\tif (opts.eips) {\n\t\t\tthis.setEIPs(opts.eips);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the chain\n\t * @param chain String ('mainnet') or Number (1) chain representation.\n\t *              Or, a Dictionary of chain parameters for a private network.\n\t * @returns The dictionary with parameters set as chain\n\t */\n\tpublic setChain(chain: string | number | Chain | bigint | object): ChainConfig {\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n\t\t\tthis._chainParams = Common._getChainParams(chain, this._customChains);\n\t\t} else if (typeof chain === 'object') {\n\t\t\tif (this._customChains.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Chain must be a string, number, or bigint when initialized with customChains passed in',\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\t\t\tfor (const param of required) {\n\t\t\t\tif (!(param in chain)) {\n\t\t\t\t\tthrow new Error(`Missing required chain parameter: ${param}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._chainParams = chain as ChainConfig;\n\t\t} else {\n\t\t\tthrow new Error('Wrong input format');\n\t\t}\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tif (hf.block === undefined) {\n\t\t\t\tthrow new Error(`Hardfork cannot have undefined block number`);\n\t\t\t}\n\t\t}\n\t\treturn this._chainParams;\n\t}\n\n\t/**\n\t * Sets the hardfork to get params for\n\t * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n\t */\n\tpublic setHardfork(hardfork: string | Hardfork): void {\n\t\tlet existing = false;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif (hfChanges[0] === hardfork) {\n\t\t\t\tif (this._hardfork !== hardfork) {\n\t\t\t\t\tthis._hardfork = hardfork;\n\t\t\t\t\tthis.emit('hardforkChanged', hardfork);\n\t\t\t\t}\n\t\t\t\texisting = true;\n\t\t\t}\n\t\t}\n\t\tif (!existing) {\n\t\t\tthrow new Error(`Hardfork with name ${hardfork} not supported`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n\t * @param timestamp: timestamp in seconds at which block was/is to be minted\n\t * @returns The name of the HF\n\t */\n\tpublic getHardforkByBlockNumber(\n\t\t_blockNumber: Numbers,\n\t\t_td?: Numbers,\n\t\t_timestamp?: Numbers,\n\t): string {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst td = toType(_td, TypeOutput.BigInt);\n\t\tconst timestamp = toType(_timestamp, TypeOutput.Number);\n\n\t\t// Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n\t\tconst hfs = this.hardforks().filter(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block !== null ||\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.ttd !== null && hf.ttd !== undefined) ||\n\t\t\t\thf.timestamp !== undefined,\n\t\t);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tconst doubleTTDHF = hfs\n\t\t\t.slice(mergeIndex + 1)\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tif (doubleTTDHF >= 0) {\n\t\t\tthrow Error(`More than one merge hardforks found with ttd specified`);\n\t\t}\n\n\t\t// Find the first hardfork that has a block number greater than `blockNumber`\n\t\t// (skips the merge hardfork since it cannot have a block number specified).\n\t\t// If timestamp is not provided, it also skips timestamps hardforks to continue\n\t\t// discovering/checking number hardforks.\n\t\tlet hfIndex = hfs.findIndex(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.block !== null && hf.block > blockNumber) ||\n\t\t\t\t(timestamp !== undefined && Number(hf.timestamp) > timestamp),\n\t\t);\n\n\t\tif (hfIndex === -1) {\n\t\t\t// all hardforks apply, set hfIndex to the last one as that's the candidate\n\t\t\thfIndex = hfs.length;\n\t\t} else if (hfIndex === 0) {\n\t\t\t// cannot have a case where a block number is before all applied hardforks\n\t\t\t// since the chain has to start with a hardfork\n\t\t\tthrow Error('Must have at least one hardfork at block 0');\n\t\t}\n\n\t\t// If timestamp is not provided, we need to rollback to the last hf with block or ttd\n\t\tif (timestamp === undefined) {\n\t\t\tconst stepBack = hfs\n\t\t\t\t.slice(0, hfIndex)\n\t\t\t\t.reverse()\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t.findIndex(hf => hf.block !== null || hf.ttd !== undefined);\n\t\t\thfIndex -= stepBack;\n\t\t}\n\t\t// Move hfIndex one back to arrive at candidate hardfork\n\t\thfIndex -= 1;\n\n\t\t// If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n\t\t// hardforks. so it will now be needed to rollback\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n\t\t\t// We're on the merge hardfork.  Let's check the TTD\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tif (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {\n\t\t\t\t// Merge ttd greater than current td so we're on hardfork before merge\n\t\t\t\thfIndex -= 1;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t} else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n\t\t\tif (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Maximum HF determined by total difficulty is lower than the block number HF',\n\t\t\t\t);\n\t\t\t} else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) <= td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'HF determined by block number is lower than the minimum total difficulty HF',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst hfStartIndex = hfIndex;\n\t\t// Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n\t\t// This won't anyway be the case with Merge hfs\n\t\tfor (; hfIndex < hfs.length - 1; hfIndex += 1) {\n\t\t\t// break out if hfIndex + 1 is not scheduled at hfIndex\n\t\t\tif (\n\t\t\t\thfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n\t\t\t\thfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (timestamp) {\n\t\t\tconst minTimeStamp = hfs\n\t\t\t\t.slice(0, hfStartIndex)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) => Math.max(Number(hf.timestamp ?? '0'), acc),\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\tif (minTimeStamp > timestamp) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Maximum HF determined by timestamp is lower than the block number/ttd HF`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst maxTimeStamp = hfs\n\t\t\t\t.slice(hfIndex + 1)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) =>\n\t\t\t\t\t\tMath.min(Number(hf.timestamp ?? timestamp), acc),\n\t\t\t\t\ttimestamp,\n\t\t\t\t);\n\t\t\tif (maxTimeStamp < timestamp) {\n\t\t\t\tthrow Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n\t\t\t}\n\t\t}\n\t\tconst hardfork = hfs[hfIndex];\n\t\treturn hardfork.name;\n\t}\n\n\t/**\n\t * Sets a new hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td\n\t * @param timestamp\n\t * @returns The name of the HF set\n\t */\n\tpublic setHardforkByBlockNumber(\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): string {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\tthis.setHardfork(hardfork);\n\t\treturn hardfork;\n\t}\n\n\t/**\n\t * Internal helper function, returns the params for the given hardfork for the chain set\n\t * @param hardfork Hardfork name\n\t * @returns Dictionary with hardfork params or null if hardfork not on chain\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic _getHardfork(hardfork: string | Hardfork): HardforkConfig | null {\n\t\tconst hfs = this.hardforks();\n\t\tfor (const hf of hfs) {\n\t\t\tif (hf.name === hardfork) return hf;\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the active EIPs\n\t * @param eips\n\t */\n\tpublic setEIPs(eips: number[] = []) {\n\t\tfor (const eip of eips) {\n\t\t\tif (!(eip in EIPs)) {\n\t\t\t\tthrow new Error(`${eip} not supported`);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tconst minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n\t\t\tif (!minHF) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tif (EIPs[eip].requiredEIPs !== undefined) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tfor (const elem of EIPs[eip].requiredEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tif (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t\t\t`${eip} requires EIP ${elem}, but is not included in the EIP list`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._eips = eips;\n\t}\n\n\t/**\n\t * Returns a parameter for the current chain setup\n\t *\n\t * If the parameter is present in an EIP, the EIP always takes precedence.\n\t * Otherwise the parameter if taken from the latest applied HF with\n\t * a change on the respective parameter.\n\t *\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic param(topic: string, name: string): bigint {\n\t\t// TODO: consider the case that different active EIPs\n\t\t// can change the same parameter\n\t\tlet value;\n\t\tfor (const eip of this._eips) {\n\t\t\tvalue = this.paramByEIP(topic, name, eip);\n\t\t\tif (value !== undefined) return value;\n\t\t}\n\t\treturn this.paramByHardfork(topic, name, this._hardfork);\n\t}\n\n\t/**\n\t * Returns the parameter corresponding to a hardfork\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param hardfork Hardfork name\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tlet value = null;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// EIP-referencing HF file (e.g. berlin.json)\n\t\t\tif ('eips' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tconst hfEIPs = hfChanges[1].eips;\n\t\t\t\tfor (const eip of hfEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tconst valueEIP = this.paramByEIP(topic, name, eip);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = typeof valueEIP === 'bigint' ? valueEIP : value;\n\t\t\t\t}\n\t\t\t\t// Parameter-inlining HF file (e.g. istanbul.json)\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic] === undefined) {\n\t\t\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic][name] !== undefined) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = hfChanges[1][topic][name].v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value ?? 0);\n\t}\n\n\t/**\n\t * Returns a parameter corresponding to an EIP\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param eip Number of the EIP\n\t * @returns The value requested or `undefined` if not found\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic paramByEIP(topic: string, name: string, eip: number): bigint | undefined {\n\t\tif (!(eip in EIPs)) {\n\t\t\tthrow new Error(`${eip} not supported`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst eipParams = EIPs[eip];\n\t\tif (!(topic in eipParams)) {\n\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\tif (eipParams[topic][name] === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\tconst value = eipParams[topic][name].v;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value);\n\t}\n\n\t/**\n\t * Returns a parameter for the hardfork active on block number or\n\t * optional provided total difficulty (Merge HF)\n\t * @param topic Parameter topic\n\t * @param name Parameter name\n\t * @param blockNumber Block number\n\t * @param td Total difficulty\n\t *    * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByBlock(\n\t\ttopic: string,\n\t\tname: string,\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): bigint {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\treturn this.paramByHardfork(topic, name, hardfork);\n\t}\n\n\t/**\n\t * Checks if an EIP is activated by either being included in the EIPs\n\t * manually passed in with the {@link CommonOpts.eips} or in a\n\t * hardfork currently being active\n\t *\n\t * Note: this method only works for EIPs being supported\n\t * by the {@link CommonOpts.eips} constructor option\n\t * @param eip\n\t */\n\tpublic isActivatedEIP(eip: number): boolean {\n\t\tif (this.eips().includes(eip)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tif (this.gteHardfork(hf.name) && 'eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif ((hf.eips as number[]).includes(eip)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if set or provided hardfork is active on block number\n\t * @param hardfork Hardfork name or null (for HF set)\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic hardforkIsActiveOnBlock(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork: string | Hardfork | null,\n\t\t_blockNumber: Numbers,\n\t): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfBlock = this.hardforkBlock(hardfork);\n\t\tif (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Alias to hardforkIsActiveOnBlock when hardfork is set\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic activeOnBlock(blockNumber: Numbers): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkIsActiveOnBlock(null, blockNumber);\n\t}\n\n\t/**\n\t * Sequence based check if given or set HF1 is greater than or equal HF2\n\t * @param hardfork1 Hardfork name or null (if set)\n\t * @param hardfork2 Hardfork name\n\t * @param opts Hardfork options\n\t * @returns True if HF1 gte HF2\n\t */\n\tpublic hardforkGteHardfork(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork1: string | Hardfork | null,\n\t\thardfork2: string | Hardfork,\n\t): boolean {\n\t\tconst hardfork1 = _hardfork1 ?? this._hardfork;\n\t\tconst hardforks = this.hardforks();\n\n\t\tlet posHf1 = -1;\n\t\tlet posHf2 = -1;\n\t\tlet index = 0;\n\t\tfor (const hf of hardforks) {\n\t\t\tif (hf.name === hardfork1) posHf1 = index;\n\t\t\tif (hf.name === hardfork2) posHf2 = index;\n\t\t\tindex += 1;\n\t\t}\n\t\treturn posHf1 >= posHf2 && posHf2 !== -1;\n\t}\n\n\t/**\n\t * Alias to hardforkGteHardfork when hardfork is set\n\t * @param hardfork Hardfork name\n\t * @returns True if hardfork set is greater than hardfork provided\n\t */\n\tpublic gteHardfork(hardfork: string | Hardfork): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkGteHardfork(null, hardfork);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this._getHardfork(hardfork)?.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (block === undefined || block === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(block);\n\t}\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst timestamp = this._getHardfork(hardfork)?.timestamp;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (timestamp === undefined || timestamp === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(timestamp);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for eip\n\t * @param eip EIP number\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic eipBlock(eip: number): bigint | null {\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\tif ('eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tif (hf.eips.includes(eip)) {\n\t\t\t\t\treturn this.hardforkBlock(\n\t\t\t\t\t\ttypeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Total difficulty or null if no set\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTTD(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst ttd = this._getHardfork(hardfork)?.ttd;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (ttd === undefined || ttd === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(ttd);\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork (given or set) change block\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this.hardforkBlock(hardfork);\n\t\treturn typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block timestamp, number or null if not available\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlockOrTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = (_hardfork as Hardfork) ?? this._hardfork;\n\t\tconst hfs = this.hardforks();\n\t\tlet hfIndex = hfs.findIndex(hf => (hf.name as Hardfork) === hardfork);\n\t\t// If the current hardfork is merge, go one behind as merge hf is not part of these\n\t\t// calcs even if the merge hf block is set\n\t\tif (hardfork === Hardfork.Merge) {\n\t\t\thfIndex -= 1;\n\t\t}\n\t\t// Hardfork not found\n\t\tif (hfIndex < 0) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tlet currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n\t\tcurrHfTimeOrBlock =\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tcurrHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n\t\t\t\t? Number(currHfTimeOrBlock)\n\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null;\n\n\t\tconst nextHf = hfs.slice(hfIndex + 1).find(hf => {\n\t\t\tlet hfTimeOrBlock = hf.timestamp ?? hf.block;\n\t\t\thfTimeOrBlock =\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null && hfTimeOrBlock !== undefined\n\t\t\t\t\t? Number(hfTimeOrBlock)\n\t\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null;\n\t\t\treturn (\n\t\t\t\t(hf.name as Hardfork) !== Hardfork.Merge &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null &&\n\t\t\t\thfTimeOrBlock !== undefined &&\n\t\t\t\thfTimeOrBlock !== currHfTimeOrBlock\n\t\t\t);\n\t\t});\n\t\t// If no next hf found with valid block or timestamp return null\n\t\tif (nextHf === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextHfBlock = nextHf.timestamp ?? nextHf.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (nextHfBlock === null || nextHfBlock === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\treturn BigInt(nextHfBlock);\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if not available\n\t * @deprecated\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = (_hardfork as Hardfork) ?? this._hardfork;\n\t\tlet hfBlock = this.hardforkBlock(hardfork);\n\t\t// If this is a merge hardfork with block not set, then we fallback to previous hardfork\n\t\t// to find the nextHardforkBlock\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null && hardfork === Hardfork.Merge) {\n\t\t\tconst hfs = this.hardforks();\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\t\tif (mergeIndex < 0) {\n\t\t\t\tthrow Error(`Merge hardfork should have been found`);\n\t\t\t}\n\t\t\thfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\t// Next fork block number or null if none available\n\t\t// Logic: if accumulator is still null and on the first occurrence of\n\t\t// a block greater than the current hfBlock set the accumulator,\n\t\t// pass on the accumulator as the final result from this time on\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n\t\tconst nextHfBlock = this.hardforks().reduce((acc: bigint | null, hf: HardforkConfig) => {\n\t\t\t// We need to ignore the merge block in our next hardfork calc\n\t\t\tconst block = BigInt(\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block,\n\t\t\t);\n\t\t\t// TypeScript can't seem to follow that the hfBlock is not null at this point\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn block > hfBlock && acc === null ? block : acc;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t}, null);\n\t\treturn nextHfBlock;\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork change block following the hardfork given or set\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isNextHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\tconst nextHardforkBlock = this.nextHardforkBlock(hardfork);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n\t}\n\n\t/**\n\t * Internal helper function to calculate a fork hash\n\t * @param hardfork Hardfork name\n\t * @param genesisHash Genesis block hash of the chain\n\t * @returns Fork hash as hex string\n\t */\n\tpublic _calcForkHash(hardfork: string | Hardfork, genesisHash: Uint8Array) {\n\t\tlet hfUint8Array = new Uint8Array();\n\t\tlet prevBlockOrTime = 0;\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst { block, timestamp, name } = hf;\n\t\t\t// Timestamp to be used for timestamp based hfs even if we may bundle\n\t\t\t// block number with them retrospectively\n\t\t\tlet blockOrTime = timestamp ?? block;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n\n\t\t\t// Skip for chainstart (0), not applied HFs (null) and\n\t\t\t// when already applied on same blockOrTime HFs\n\t\t\t// and on the merge since forkhash doesn't change on merge hf\n\t\t\tif (\n\t\t\t\ttypeof blockOrTime === 'number' &&\n\t\t\t\tblockOrTime !== 0 &&\n\t\t\t\tblockOrTime !== prevBlockOrTime &&\n\t\t\t\t(name as Hardfork) !== Hardfork.Merge\n\t\t\t) {\n\t\t\t\tconst hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n\t\t\t\thfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n\t\t\t\tprevBlockOrTime = blockOrTime;\n\t\t\t}\n\n\t\t\tif (hf.name === hardfork) break;\n\t\t}\n\t\tconst inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);\n\n\t\t// CRC32 delivers result as signed (negative) 32-bit integer,\n\t\t// convert to hex string\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n\t\treturn forkhash;\n\t}\n\n\t/**\n\t * Returns an eth/64 compliant fork hash (EIP-2124)\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n\t */\n\tpublic forkHash(_hardfork?: string | Hardfork, genesisHash?: Uint8Array): string {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst data = this._getHardfork(hardfork);\n\t\tif (\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tdata === null ||\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t(data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)\n\t\t) {\n\t\t\tconst msg = 'No fork hash calculation possible for future hardfork';\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (data?.forkHash !== null && data?.forkHash !== undefined) {\n\t\t\treturn data.forkHash;\n\t\t}\n\t\tif (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n\t\treturn this._calcForkHash(hardfork, genesisHash);\n\t}\n\n\t/**\n\t *\n\t * @param forkHash Fork hash as a hex string\n\t * @returns Array with hardfork data (name, block, forkHash)\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkForForkHash(forkHash: string): HardforkConfig | null {\n\t\tconst resArray = this.hardforks().filter((hf: HardforkConfig) => hf.forkHash === forkHash);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n\t}\n\n\t/**\n\t * Sets any missing forkHashes on the passed-in {@link Common} instance\n\t * @param common The {@link Common} to set the forkHashes for\n\t * @param genesisHash The genesis block hash\n\t */\n\tpublic setForkHashes(genesisHash: Uint8Array) {\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst blockOrTime = hf.timestamp ?? hf.block;\n\t\t\tif (\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.forkHash === null || hf.forkHash === undefined) &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t((blockOrTime !== null && blockOrTime !== undefined) ||\n\t\t\t\t\ttypeof hf.ttd !== 'undefined')\n\t\t\t) {\n\t\t\t\thf.forkHash = this.forkHash(hf.name, genesisHash);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Genesis parameters of the current chain\n\t * @returns Genesis dictionary\n\t */\n\tpublic genesis(): GenesisBlockConfig {\n\t\treturn this._chainParams.genesis;\n\t}\n\n\t/**\n\t * Returns the hardforks for current chain\n\t * @returns {Array} Array with arrays of hardforks\n\t */\n\tpublic hardforks(): HardforkConfig[] {\n\t\treturn this._chainParams.hardforks;\n\t}\n\n\t/**\n\t * Returns bootstrap nodes for the current chain\n\t * @returns {Dictionary} Dict with bootstrap nodes\n\t */\n\tpublic bootstrapNodes(): BootstrapNodeConfig[] | undefined {\n\t\treturn this._chainParams.bootstrapNodes;\n\t}\n\n\t/**\n\t * Returns DNS networks for the current chain\n\t * @returns {String[]} Array of DNS ENR urls\n\t */\n\tpublic dnsNetworks(): string[] {\n\t\treturn this._chainParams.dnsNetworks!;\n\t}\n\n\t/**\n\t * Returns the hardfork set\n\t * @returns Hardfork name\n\t */\n\tpublic hardfork(): string | Hardfork {\n\t\treturn this._hardfork;\n\t}\n\n\t/**\n\t * Returns the Id of current chain\n\t * @returns chain Id\n\t */\n\tpublic chainId(): bigint {\n\t\treturn BigInt(this._chainParams.chainId);\n\t}\n\n\t/**\n\t * Returns the name of current chain\n\t * @returns chain name (lower case)\n\t */\n\tpublic chainName(): string {\n\t\treturn this._chainParams.name;\n\t}\n\n\t/**\n\t * Returns the Id of current network\n\t * @returns network Id\n\t */\n\tpublic networkId(): bigint {\n\t\treturn BigInt(this._chainParams.networkId);\n\t}\n\n\t/**\n\t * Returns the active EIPs\n\t * @returns List of EIPs\n\t */\n\tpublic eips(): number[] {\n\t\treturn this._eips;\n\t}\n\n\t/**\n\t * Returns the consensus type of the network\n\t * Possible values: \"pow\"|\"poa\"|\"pos\"\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusType(): string | ConsensusType {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.type;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? this._chainParams.consensus.type;\n\t}\n\n\t/**\n\t * Returns the concrete consensus implementation\n\t * algorithm or protocol for the network\n\t * e.g. \"ethash\" for \"pow\" consensus type,\n\t * \"clique\" for \"poa\" consensus type or\n\t * \"casper\" for \"pos\" consensus type.\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusAlgorithm(): string | ConsensusAlgorithm {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.algorithm;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? (this._chainParams.consensus.algorithm as ConsensusAlgorithm);\n\t}\n\n\t/**\n\t * Returns a dictionary with consensus configuration\n\t * parameters based on the consensus algorithm\n\t *\n\t * Expected returns (parameters must be present in\n\t * the respective chain json files):\n\t *\n\t * ethash: empty object\n\t * clique: period, epoch\n\t * casper: empty object\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// The config parameter is named after the respective consensus algorithm\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn (\n\t\t\tvalue ??\n\t\t\tthis._chainParams.consensus[this.consensusAlgorithm() as ConsensusAlgorithm] ??\n\t\t\t{}\n\t\t);\n\t}\n\n\t/**\n\t * Returns a deep copy of this {@link Common} instance.\n\t */\n\tpublic copy(): Common {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n\t\tconst copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\tcopy.removeAllListeners();\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn copy;\n\t}\n\n\tpublic static _getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {\n\t\tconst names: ChainName = {};\n\t\tfor (const [name, id] of Object.entries(Chain)) {\n\t\t\tnames[id] = name.toLowerCase();\n\t\t}\n\t\tconst chains = { mainnet, goerli, sepolia } as ChainsConfig;\n\t\tif (customChains) {\n\t\t\tfor (const chain of customChains) {\n\t\t\t\tconst { name } = chain;\n\t\t\t\tnames[chain.chainId.toString()] = name;\n\t\t\t\tchains[name] = chain;\n\t\t\t}\n\t\t}\n\t\tchains.names = names;\n\t\treturn chains;\n\t}\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,GAAG,MAAM,QAAQ;AACxB,SAASC,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAEC,gBAAgB,QAAQ,YAAY;AAEnF,SAASC,UAAU,QAAQ,YAAY;AACvC,SAASC,eAAe,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,YAAY;AACtE,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,SAASC,IAAI,QAAQ,iBAAiB;AAEtC,SAASC,KAAK,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,YAAY;AACzD,SAASC,SAAS,IAAIC,cAAc,QAAQ,sBAAsB;AAiBlE,MAAM;EAAEC,GAAG,EAAEC;AAAe,CAAE,GAAGnB,GAAG;AAIpC;;;;;;;;AAQA,OAAM,MAAOoB,MAAO,SAAQnB,YAAY;EAUvC;;;;;;;;;;;;;;;;;;;;;;;;EAwBO,OAAOoB,MAAMA,CACnBC,iBAAqD,EACrDC,IAAA,GAAyB,EAAE;;IAE3B,MAAMC,SAAS,GAAG,CAAAC,EAAA,GAAAF,IAAI,CAACC,SAAS,cAAAC,EAAA,cAAAA,EAAA,GAAI,SAAS;IAC7C,MAAMC,mBAAmB,GAAAC,MAAA,CAAAC,MAAA,KAAQR,MAAM,CAACS,eAAe,CAACL,SAAS,CAAC,CAAE;IACpEE,mBAAmB,CAACI,IAAI,GAAG,cAAc;IAEzC,IAAI,OAAOR,iBAAiB,KAAK,QAAQ,EAAE;MAC1C,OAAO,IAAIF,MAAM,CAAAO,MAAA,CAAAC,MAAA;QAChBG,KAAK,EAAAJ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACDF,mBAAmB,GACnBJ,iBAAiB;MAAA,GAElBC,IAAI,EACN;IACH;IACA,IAAID,iBAAiB,KAAKR,WAAW,CAACkB,cAAc,EAAE;MACrD,OAAOZ,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAACkB,cAAc;QAChCC,OAAO,EAAE,GAAG;QACZC,SAAS,EAAE;OACX,EACDX,IAAI,CACJ;IACF;IACA,IAAID,iBAAiB,KAAKR,WAAW,CAACqB,aAAa,EAAE;MACpD,OAAOf,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAACqB,aAAa;QAC/BF,OAAO,EAAE,KAAK;QACdC,SAAS,EAAE;OACX,EACDX,IAAI,CACJ;IACF;IACA,IAAID,iBAAiB,KAAKR,WAAW,CAACsB,sBAAsB,EAAE;MAC7D,OAAOhB,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAACsB,sBAAsB;QACxCH,OAAO,EAAE,MAAM;QACfC,SAAS,EAAE;OACX,EACDX,IAAI,CACJ;IACF;IACA,IAAID,iBAAiB,KAAKR,WAAW,CAACuB,WAAW,EAAE;MAClD,OAAOjB,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAACuB,WAAW;QAC7BJ,OAAO,EAAE,KAAK;QACdC,SAAS,EAAE;OACX,EACDX,IAAI,CACJ;IACF;IACA,IAAID,iBAAiB,KAAKR,WAAW,CAACwB,SAAS,EAAE;MAChD,OAAOlB,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAACwB,SAAS;QAC3BL,OAAO,EAAE,GAAG;QACZC,SAAS,EAAE;OACX,EACDX,IAAI,CACJ;IACF;IAEA,IAAID,iBAAiB,KAAKR,WAAW,CAACyB,eAAe,EAAE;MACtD,OAAOnB,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAACyB,eAAe;QACjCN,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE;OACX,EAAAP,MAAA,CAAAC,MAAA;QAECY,QAAQ,EAAEzB,QAAQ,CAAC0B;MAAM,GAAKlB,IAAI,EACpC;IACF;IAEA,IAAID,iBAAiB,KAAKR,WAAW,CAAC4B,kBAAkB,EAAE;MACzD,OAAOtB,MAAM,CAACC,MAAM,CACnB;QACCS,IAAI,EAAEhB,WAAW,CAAC4B,kBAAkB;QACpCT,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE;OACX,EAAAP,MAAA,CAAAC,MAAA;QAECY,QAAQ,EAAEzB,QAAQ,CAAC0B;MAAM,GAAKlB,IAAI,EACpC;IACF;IACA;IACA,MAAM,IAAIoB,KAAK,CAAC,gBAAgBrB,iBAAiB,gBAAgB,CAAC;EACnE;EAEA;;;;;;EAMO,OAAOsB,eAAeA;EAC5B;EACAC,WAAgB,EAChB;IAAEd,KAAK;IAAEe,IAAI;IAAEC,WAAW;IAAEP,QAAQ;IAAEQ;EAAoB,CAAkB;;IAE5E,MAAMC,aAAa,GAAGzC,gBAAgB,CAACqC,WAAW,EAAEd,KAAK,EAAEiB,oBAAoB,CAAC;IAChF,MAAME,MAAM,GAAG,IAAI9B,MAAM,CAAC;MACzBW,KAAK,EAAE,CAAAN,EAAA,GAAAwB,aAAa,CAACnB,IAAI,cAAAL,EAAA,cAAAA,EAAA,GAAI,QAAQ;MACrC0B,YAAY,EAAE,CAACF,aAAa,CAAC;MAC7BH,IAAI;MACJN,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIS,aAAa,CAACT;KACpC,CAAC;IACF,IAAIO,WAAW,KAAKK,SAAS,EAAE;MAC9BF,MAAM,CAACG,aAAa,CAACN,WAAW,CAAC;IAClC;IACA,OAAOG,MAAM;EACd;EAEA;;;;;EAKO,OAAOI,kBAAkBA,CAACrB,OAAe;IAC/C,MAAMsB,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,EAAE;IACtD,OAAOC,OAAO,CAAEF,iBAAiB,CAACG,KAAmB,CAACzB,OAAO,CAAC0B,QAAQ,EAAE,CAAC,CAAC;EAC3E;EAEQ,OAAO9B,eAAeA,CAC7B+B,MAAwC,EACxCT,YAA4B;IAE5B,IAAIpB,KAAK,GAAG6B,MAAM;IAClB,MAAML,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAACL,YAAY,CAAC;IAClE,IAAI,OAAOpB,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3DA,KAAK,GAAGA,KAAK,CAAC4B,QAAQ,EAAE;MAExB,IAAKJ,iBAAiB,CAACG,KAAmB,CAAC3B,KAAK,CAAC,EAAE;QAClD,MAAMD,IAAI,GAAYyB,iBAAiB,CAACG,KAAmB,CAAC3B,KAAK,CAAC;QAClE,OAAOwB,iBAAiB,CAACzB,IAAI,CAAgB;MAC9C;MAEA,MAAM,IAAIa,KAAK,CAAC,iBAAiBZ,KAAK,gBAAgB,CAAC;IACxD;IAEA,IAAIwB,iBAAiB,CAACxB,KAAK,CAAC,KAAKqB,SAAS,EAAE;MAC3C,OAAOG,iBAAiB,CAACxB,KAAK,CAAgB;IAC/C;IAEA,MAAM,IAAIY,KAAK,CAAC,mBAAmBZ,KAAK,gBAAgB,CAAC;EAC1D;EAEA8B,YAAmBtC,IAAgB;;IAClC,KAAK,EAAE;IAvLA,KAAAuC,KAAK,GAAa,EAAE;IAwL3B,IAAI,CAACC,aAAa,GAAG,CAAAtC,EAAA,GAAAF,IAAI,CAAC4B,YAAY,cAAA1B,EAAA,cAAAA,EAAA,GAAI,EAAE;IAC5C,IAAI,CAACuC,YAAY,GAAG,IAAI,CAACC,QAAQ,CAAC1C,IAAI,CAACQ,KAAK,CAAC;IAC7C,IAAI,CAACmC,gBAAgB,GAAG,CAAAC,EAAA,OAAI,CAACH,YAAY,CAACI,eAAe,cAAAD,EAAA,cAAAA,EAAA,GAAIpD,QAAQ,CAACsD,KAAK;IAC3E;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACtD,SAAS,EAAE,CAACuD,GAAG,CAACC,EAAE,IAAI,CAClDA,EAAE,CAAC1C,IAAwB,EAC3Bb,cAAc,CAACuD,EAAE,CAAC1C,IAAwB,CAAC,CAC3C,CAAC;IACF,IAAI,CAAC2C,SAAS,GAAG,IAAI,CAACP,gBAAgB;IACtC,IAAI3C,IAAI,CAACiB,QAAQ,KAAKY,SAAS,EAAE;MAChC,IAAI,CAACsB,WAAW,CAACnD,IAAI,CAACiB,QAAQ,CAAC;IAChC;IACA,IAAIjB,IAAI,CAACuB,IAAI,EAAE;MACd,IAAI,CAAC6B,OAAO,CAACpD,IAAI,CAACuB,IAAI,CAAC;IACxB;EACD;EAEA;;;;;;EAMOmB,QAAQA,CAAClC,KAAgD;IAC/D,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACxF,IAAI,CAACiC,YAAY,GAAG5C,MAAM,CAACS,eAAe,CAACE,KAAK,EAAE,IAAI,CAACgC,aAAa,CAAC;IACtE,CAAC,MAAM,IAAI,OAAOhC,KAAK,KAAK,QAAQ,EAAE;MACrC,IAAI,IAAI,CAACgC,aAAa,CAACa,MAAM,GAAG,CAAC,EAAE;QAClC,MAAM,IAAIjC,KAAK,CACd,wFAAwF,CACxF;MACF;MACA,MAAMkC,QAAQ,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,gBAAgB,CAAC;MACxE,KAAK,MAAMC,KAAK,IAAID,QAAQ,EAAE;QAC7B,IAAI,EAAEC,KAAK,IAAI/C,KAAK,CAAC,EAAE;UACtB,MAAM,IAAIY,KAAK,CAAC,qCAAqCmC,KAAK,EAAE,CAAC;QAC9D;MACD;MACA,IAAI,CAACd,YAAY,GAAGjC,KAAoB;IACzC,CAAC,MAAM;MACN,MAAM,IAAIY,KAAK,CAAC,oBAAoB,CAAC;IACtC;IACA,KAAK,MAAM6B,EAAE,IAAI,IAAI,CAACxD,SAAS,EAAE,EAAE;MAClC,IAAIwD,EAAE,CAACO,KAAK,KAAK3B,SAAS,EAAE;QAC3B,MAAM,IAAIT,KAAK,CAAC,6CAA6C,CAAC;MAC/D;IACD;IACA,OAAO,IAAI,CAACqB,YAAY;EACzB;EAEA;;;;EAIOU,WAAWA,CAAClC,QAA2B;IAC7C,IAAIwC,QAAQ,GAAG,KAAK;IACpB,KAAK,MAAMC,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C,IAAIW,SAAS,CAAC,CAAC,CAAC,KAAKzC,QAAQ,EAAE;QAC9B,IAAI,IAAI,CAACiC,SAAS,KAAKjC,QAAQ,EAAE;UAChC,IAAI,CAACiC,SAAS,GAAGjC,QAAQ;UACzB,IAAI,CAAC0C,IAAI,CAAC,iBAAiB,EAAE1C,QAAQ,CAAC;QACvC;QACAwC,QAAQ,GAAG,IAAI;MAChB;IACD;IACA,IAAI,CAACA,QAAQ,EAAE;MACd,MAAM,IAAIrC,KAAK,CAAC,sBAAsBH,QAAQ,gBAAgB,CAAC;IAChE;EACD;EAEA;;;;;;;;;;;;;EAaO2C,wBAAwBA,CAC9BC,YAAqB,EACrBC,GAAa,EACbC,UAAoB;IAEpB,MAAMC,WAAW,GAAGhF,MAAM,CAAC6E,YAAY,EAAE/E,UAAU,CAACmF,MAAM,CAAC;IAC3D,MAAMC,EAAE,GAAGlF,MAAM,CAAC8E,GAAG,EAAEhF,UAAU,CAACmF,MAAM,CAAC;IACzC,MAAME,SAAS,GAAGnF,MAAM,CAAC+E,UAAU,EAAEjF,UAAU,CAACsF,MAAM,CAAC;IAEvD;IACA,MAAMC,GAAG,GAAG,IAAI,CAAC5E,SAAS,EAAE,CAAC6E,MAAM,CAClCrB,EAAE;IACD;IACAA,EAAE,CAACO,KAAK,KAAK,IAAI;IACjB;IACCP,EAAE,CAACsB,GAAG,KAAK,IAAI,IAAItB,EAAE,CAACsB,GAAG,KAAK1C,SAAU,IACzCoB,EAAE,CAACkB,SAAS,KAAKtC,SAAS,CAC3B;IACD;IACA,MAAM2C,UAAU,GAAGH,GAAG,CAACI,SAAS,CAACxB,EAAE,IAAIA,EAAE,CAACsB,GAAG,KAAK,IAAI,IAAItB,EAAE,CAACsB,GAAG,KAAK1C,SAAS,CAAC;IAC/E,MAAM6C,WAAW,GAAGL,GAAG,CACrBM,KAAK,CAACH,UAAU,GAAG,CAAC;IACrB;IAAA,CACCC,SAAS,CAACxB,EAAE,IAAIA,EAAE,CAACsB,GAAG,KAAK,IAAI,IAAItB,EAAE,CAACsB,GAAG,KAAK1C,SAAS,CAAC;IAC1D,IAAI6C,WAAW,IAAI,CAAC,EAAE;MACrB,MAAMtD,KAAK,CAAC,wDAAwD,CAAC;IACtE;IAEA;IACA;IACA;IACA;IACA,IAAIwD,OAAO,GAAGP,GAAG,CAACI,SAAS,CAC1BxB,EAAE;IACD;IACCA,EAAE,CAACO,KAAK,KAAK,IAAI,IAAIP,EAAE,CAACO,KAAK,GAAGQ,WAAW,IAC3CG,SAAS,KAAKtC,SAAS,IAAIuC,MAAM,CAACnB,EAAE,CAACkB,SAAS,CAAC,GAAGA,SAAU,CAC9D;IAED,IAAIS,OAAO,KAAK,CAAC,CAAC,EAAE;MACnB;MACAA,OAAO,GAAGP,GAAG,CAAChB,MAAM;IACrB,CAAC,MAAM,IAAIuB,OAAO,KAAK,CAAC,EAAE;MACzB;MACA;MACA,MAAMxD,KAAK,CAAC,4CAA4C,CAAC;IAC1D;IAEA;IACA,IAAI+C,SAAS,KAAKtC,SAAS,EAAE;MAC5B,MAAMgD,QAAQ,GAAGR,GAAG,CAClBM,KAAK,CAAC,CAAC,EAAEC,OAAO,CAAC,CACjBE,OAAO;MACR;MAAA,CACCL,SAAS,CAACxB,EAAE,IAAIA,EAAE,CAACO,KAAK,KAAK,IAAI,IAAIP,EAAE,CAACsB,GAAG,KAAK1C,SAAS,CAAC;MAC5D+C,OAAO,IAAIC,QAAQ;IACpB;IACA;IACAD,OAAO,IAAI,CAAC;IAEZ;IACA;IACA;IACA,IAAIP,GAAG,CAACO,OAAO,CAAC,CAACpB,KAAK,KAAK,IAAI,IAAIa,GAAG,CAACO,OAAO,CAAC,CAACT,SAAS,KAAKtC,SAAS,EAAE;MACxE;MACA;MACA,IAAIqC,EAAE,KAAKrC,SAAS,IAAIqC,EAAE,KAAK,IAAI,IAAID,MAAM,CAACI,GAAG,CAACO,OAAO,CAAC,CAACL,GAAI,CAAC,GAAGL,EAAE,EAAE;QACtE;QACAU,OAAO,IAAI,CAAC;MACb;MACA;IACD,CAAC,MAAM,IAAIJ,UAAU,IAAI,CAAC,IAAIN,EAAE,KAAKrC,SAAS,IAAIqC,EAAE,KAAK,IAAI,EAAE;MAC9D,IAAIU,OAAO,IAAIJ,UAAU,IAAIP,MAAM,CAACI,GAAG,CAACG,UAAU,CAAC,CAACD,GAAI,CAAC,GAAGL,EAAE,EAAE;QAC/D,MAAM9C,KAAK,CACV,6EAA6E,CAC7E;MACF,CAAC,MAAM,IAAIwD,OAAO,GAAGJ,UAAU,IAAIP,MAAM,CAACI,GAAG,CAACG,UAAU,CAAC,CAACD,GAAI,CAAC,IAAIL,EAAE,EAAE;QACtE,MAAM9C,KAAK,CACV,6EAA6E,CAC7E;MACF;IACD;IAEA,MAAM2D,YAAY,GAAGH,OAAO;IAC5B;IACA;IACA,OAAOA,OAAO,GAAGP,GAAG,CAAChB,MAAM,GAAG,CAAC,EAAEuB,OAAO,IAAI,CAAC,EAAE;MAC9C;MACA,IACCP,GAAG,CAACO,OAAO,CAAC,CAACpB,KAAK,KAAKa,GAAG,CAACO,OAAO,GAAG,CAAC,CAAC,CAACpB,KAAK,IAC7Ca,GAAG,CAACO,OAAO,CAAC,CAACT,SAAS,KAAKE,GAAG,CAACO,OAAO,GAAG,CAAC,CAAC,CAACT,SAAS,EACpD;QACD;MACD;IACD;IAEA,IAAIA,SAAS,EAAE;MACd,MAAMa,YAAY,GAAGX,GAAG,CACtBM,KAAK,CAAC,CAAC,EAAEI,YAAY,CAAC,CACtBE,MAAM,CACN,CAACC,GAAW,EAAEjC,EAAkB,KAAI;QAAA,IAAA/C,EAAA;QAAC,OAAAiF,IAAI,CAACC,GAAG,CAAChB,MAAM,CAAC,CAAAlE,EAAA,GAAA+C,EAAE,CAACkB,SAAS,cAAAjE,EAAA,cAAAA,EAAA,GAAI,GAAG,CAAC,EAAEgF,GAAG,CAAC;MAAA,GAC/E,CAAC,CACD;MACF,IAAIF,YAAY,GAAGb,SAAS,EAAE;QAC7B,MAAM/C,KAAK,CACV,0EAA0E,CAC1E;MACF;MAEA,MAAMiE,YAAY,GAAGhB,GAAG,CACtBM,KAAK,CAACC,OAAO,GAAG,CAAC,CAAC,CAClBK,MAAM,CACN,CAACC,GAAW,EAAEjC,EAAkB,KAAI;QAAA,IAAA/C,EAAA;QACnC,OAAAiF,IAAI,CAACG,GAAG,CAAClB,MAAM,CAAC,CAAAlE,EAAA,GAAA+C,EAAE,CAACkB,SAAS,cAAAjE,EAAA,cAAAA,EAAA,GAAIiE,SAAS,CAAC,EAAEe,GAAG,CAAC;MAAA,GACjDf,SAAS,CACT;MACF,IAAIkB,YAAY,GAAGlB,SAAS,EAAE;QAC7B,MAAM/C,KAAK,CAAC,sEAAsE,CAAC;MACpF;IACD;IACA,MAAMH,QAAQ,GAAGoD,GAAG,CAACO,OAAO,CAAC;IAC7B,OAAO3D,QAAQ,CAACV,IAAI;EACrB;EAEA;;;;;;;;;;;;;EAaOgF,wBAAwBA,CAC9BvB,WAAoB,EACpBE,EAAY,EACZC,SAAmB;IAEnB,MAAMlD,QAAQ,GAAG,IAAI,CAAC2C,wBAAwB,CAACI,WAAW,EAAEE,EAAE,EAAEC,SAAS,CAAC;IAC1E,IAAI,CAAChB,WAAW,CAAClC,QAAQ,CAAC;IAC1B,OAAOA,QAAQ;EAChB;EAEA;;;;;EAKA;EACOuE,YAAYA,CAACvE,QAA2B;IAC9C,MAAMoD,GAAG,GAAG,IAAI,CAAC5E,SAAS,EAAE;IAC5B,KAAK,MAAMwD,EAAE,IAAIoB,GAAG,EAAE;MACrB,IAAIpB,EAAE,CAAC1C,IAAI,KAAKU,QAAQ,EAAE,OAAOgC,EAAE;IACpC;IACA;IACA,OAAO,IAAI;EACZ;EAEA;;;;EAIOG,OAAOA,CAAC7B,IAAA,GAAiB,EAAE;IACjC,KAAK,MAAMkE,GAAG,IAAIlE,IAAI,EAAE;MACvB,IAAI,EAAEkE,GAAG,IAAIpG,IAAI,CAAC,EAAE;QACnB,MAAM,IAAI+B,KAAK,CAAC,GAAGqE,GAAG,gBAAgB,CAAC;MACxC;MACA;MACA,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACtG,IAAI,CAACoG,GAAG,CAAC,CAACG,eAAe,CAAC;MACzD,IAAI,CAACF,KAAK,EAAE;QACX,MAAM,IAAItE,KAAK;QACd;QACA,GAAGqE,GAAG,oCAAoC,IAAI,CAACxE,QAAQ,EAAE,sBAAsByE,KAAK,EAAE,CACtF;MACF;MACA;MACA,IAAIrG,IAAI,CAACoG,GAAG,CAAC,CAACI,YAAY,KAAKhE,SAAS,EAAE;QACzC;QACA,KAAK,MAAMiE,IAAI,IAAIzG,IAAI,CAACoG,GAAG,CAAC,CAACI,YAAY,EAAE;UAC1C;UACA,IAAI,EAAEtE,IAAI,CAACwE,QAAQ,CAACD,IAAI,CAAC,IAAI,IAAI,CAACE,cAAc,CAACF,IAAI,CAAC,CAAC,EAAE;YACxD,MAAM,IAAI1E,KAAK;YACd;YACA,GAAGqE,GAAG,iBAAiBK,IAAI,uCAAuC,CAClE;UACF;QACD;MACD;IACD;IACA,IAAI,CAACvD,KAAK,GAAGhB,IAAI;EAClB;EAEA;;;;;;;;;;;EAWOgC,KAAKA,CAAC0C,KAAa,EAAE1F,IAAY;IACvC;IACA;IACA,IAAI2F,KAAK;IACT,KAAK,MAAMT,GAAG,IAAI,IAAI,CAAClD,KAAK,EAAE;MAC7B2D,KAAK,GAAG,IAAI,CAACC,UAAU,CAACF,KAAK,EAAE1F,IAAI,EAAEkF,GAAG,CAAC;MACzC,IAAIS,KAAK,KAAKrE,SAAS,EAAE,OAAOqE,KAAK;IACtC;IACA,OAAO,IAAI,CAACE,eAAe,CAACH,KAAK,EAAE1F,IAAI,EAAE,IAAI,CAAC2C,SAAS,CAAC;EACzD;EAEA;;;;;;;EAOOkD,eAAeA,CAACH,KAAa,EAAE1F,IAAY,EAAEU,QAA2B;IAC9E;IACA,IAAIiF,KAAK,GAAG,IAAI;IAChB,KAAK,MAAMxC,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C;MACA,IAAI,MAAM,IAAIW,SAAS,CAAC,CAAC,CAAC,EAAE;QAC3B;QACA,MAAM2C,MAAM,GAAG3C,SAAS,CAAC,CAAC,CAAC,CAACnC,IAAI;QAChC,KAAK,MAAMkE,GAAG,IAAIY,MAAM,EAAE;UACzB;UACA,MAAMC,QAAQ,GAAG,IAAI,CAACH,UAAU,CAACF,KAAK,EAAE1F,IAAI,EAAEkF,GAAG,CAAC;UAClD;UACAS,KAAK,GAAG,OAAOI,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGJ,KAAK;QACxD;QACA;MACD,CAAC,MAAM;QACN;QACA,IAAIxC,SAAS,CAAC,CAAC,CAAC,CAACuC,KAAK,CAAC,KAAKpE,SAAS,EAAE;UACtC,MAAM,IAAIT,KAAK,CAAC,SAAS6E,KAAK,cAAc,CAAC;QAC9C;QACA;QACA,IAAIvC,SAAS,CAAC,CAAC,CAAC,CAACuC,KAAK,CAAC,CAAC1F,IAAI,CAAC,KAAKsB,SAAS,EAAE;UAC5C;UACAqE,KAAK,GAAGxC,SAAS,CAAC,CAAC,CAAC,CAACuC,KAAK,CAAC,CAAC1F,IAAI,CAAC,CAACgG,CAAC;QACpC;MACD;MACA,IAAI7C,SAAS,CAAC,CAAC,CAAC,KAAKzC,QAAQ,EAAE;IAChC;IACA;IACA,OAAOgD,MAAM,CAACiC,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,CAAC,CAAC;EAC1B;EAEA;;;;;;;EAOA;EACOC,UAAUA,CAACF,KAAa,EAAE1F,IAAY,EAAEkF,GAAW;IACzD,IAAI,EAAEA,GAAG,IAAIpG,IAAI,CAAC,EAAE;MACnB,MAAM,IAAI+B,KAAK,CAAC,GAAGqE,GAAG,gBAAgB,CAAC;IACxC;IACA;IACA,MAAMe,SAAS,GAAGnH,IAAI,CAACoG,GAAG,CAAC;IAC3B,IAAI,EAAEQ,KAAK,IAAIO,SAAS,CAAC,EAAE;MAC1B,MAAM,IAAIpF,KAAK,CAAC,SAAS6E,KAAK,cAAc,CAAC;IAC9C;IACA;IACA,IAAIO,SAAS,CAACP,KAAK,CAAC,CAAC1F,IAAI,CAAC,KAAKsB,SAAS,EAAE;MACzC,OAAOA,SAAS;IACjB;IACA;IACA,MAAMqE,KAAK,GAAGM,SAAS,CAACP,KAAK,CAAC,CAAC1F,IAAI,CAAC,CAACgG,CAAC;IACtC;IACA,OAAOtC,MAAM,CAACiC,KAAK,CAAC;EACrB;EAEA;;;;;;;;;EASOO,YAAYA,CAClBR,KAAa,EACb1F,IAAY,EACZyD,WAAoB,EACpBE,EAAY,EACZC,SAAmB;IAEnB,MAAMlD,QAAQ,GAAG,IAAI,CAAC2C,wBAAwB,CAACI,WAAW,EAAEE,EAAE,EAAEC,SAAS,CAAC;IAC1E,OAAO,IAAI,CAACiC,eAAe,CAACH,KAAK,EAAE1F,IAAI,EAAEU,QAAQ,CAAC;EACnD;EAEA;;;;;;;;;EASO+E,cAAcA,CAACP,GAAW;IAChC,IAAI,IAAI,CAAClE,IAAI,EAAE,CAACwE,QAAQ,CAACN,GAAG,CAAC,EAAE;MAC9B,OAAO,IAAI;IACZ;IACA,KAAK,MAAM/B,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C;MACA,MAAME,EAAE,GAAGS,SAAS,CAAC,CAAC,CAAC;MACvB;MACA,IAAI,IAAI,CAACiC,WAAW,CAAC1C,EAAE,CAAC1C,IAAI,CAAC,IAAI,MAAM,IAAI0C,EAAE,EAAE;QAC9C;QACA,IAAKA,EAAE,CAAC1B,IAAiB,CAACwE,QAAQ,CAACN,GAAG,CAAC,EAAE;UACxC,OAAO,IAAI;QACZ;MACD;IACD;IACA,OAAO,KAAK;EACb;EAEA;;;;;;EAMOiB,uBAAuBA;EAC7B;EACAxD,SAAmC,EACnCW,YAAqB;IAErB,MAAMG,WAAW,GAAGhF,MAAM,CAAC6E,YAAY,EAAE/E,UAAU,CAACmF,MAAM,CAAC;IAC3D,MAAMhD,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C,MAAMyD,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC3F,QAAQ,CAAC;IAC5C,IAAI,OAAO0F,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK1C,MAAM,CAAC,CAAC,CAAC,IAAID,WAAW,IAAI2C,OAAO,EAAE;MACnF,OAAO,IAAI;IACZ;IACA,OAAO,KAAK;EACb;EAEA;;;;;EAKOE,aAAaA,CAAC7C,WAAoB;IACxC;IACA,OAAO,IAAI,CAAC0C,uBAAuB,CAAC,IAAI,EAAE1C,WAAW,CAAC;EACvD;EAEA;;;;;;;EAOO8C,mBAAmBA;EACzB;EACAC,UAAoC,EACpCC,SAA4B;IAE5B,MAAMC,SAAS,GAAGF,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,IAAI,CAAC7D,SAAS;IAC9C,MAAMzD,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;IAElC,IAAIyH,MAAM,GAAG,CAAC,CAAC;IACf,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,MAAMnE,EAAE,IAAIxD,SAAS,EAAE;MAC3B,IAAIwD,EAAE,CAAC1C,IAAI,KAAK0G,SAAS,EAAEC,MAAM,GAAGE,KAAK;MACzC,IAAInE,EAAE,CAAC1C,IAAI,KAAKyG,SAAS,EAAEG,MAAM,GAAGC,KAAK;MACzCA,KAAK,IAAI,CAAC;IACX;IACA,OAAOF,MAAM,IAAIC,MAAM,IAAIA,MAAM,KAAK,CAAC,CAAC;EACzC;EAEA;;;;;EAKOxB,WAAWA,CAAC1E,QAA2B;IAC7C;IACA,OAAO,IAAI,CAAC6F,mBAAmB,CAAC,IAAI,EAAE7F,QAAQ,CAAC;EAChD;EAEA;;;;;EAKA;EACO2F,aAAaA,CAAC1D,SAA6B;;IACjD,MAAMjC,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C,MAAMM,KAAK,GAAG,CAAAtD,EAAA,OAAI,CAACsF,YAAY,CAACvE,QAAQ,CAAC,cAAAf,EAAA,uBAAAA,EAAA,CAAEsD,KAAK;IAChD;IACA,IAAIA,KAAK,KAAK3B,SAAS,IAAI2B,KAAK,KAAK,IAAI,EAAE;MAC1C;MACA,OAAO,IAAI;IACZ;IACA,OAAOS,MAAM,CAACT,KAAK,CAAC;EACrB;EACA;EACO6D,iBAAiBA,CAACnE,SAA6B;;IACrD,MAAMjC,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C,MAAMiB,SAAS,GAAG,CAAAjE,EAAA,OAAI,CAACsF,YAAY,CAACvE,QAAQ,CAAC,cAAAf,EAAA,uBAAAA,EAAA,CAAEiE,SAAS;IACxD;IACA,IAAIA,SAAS,KAAKtC,SAAS,IAAIsC,SAAS,KAAK,IAAI,EAAE;MAClD;MACA,OAAO,IAAI;IACZ;IACA,OAAOF,MAAM,CAACE,SAAS,CAAC;EACzB;EAEA;;;;;EAKA;EACOmD,QAAQA,CAAC7B,GAAW;IAC1B,KAAK,MAAM/B,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C;MACA,MAAME,EAAE,GAAGS,SAAS,CAAC,CAAC,CAAC;MACvB,IAAI,MAAM,IAAIT,EAAE,EAAE;QACjB;QACA,IAAIA,EAAE,CAAC1B,IAAI,CAACwE,QAAQ,CAACN,GAAG,CAAC,EAAE;UAC1B,OAAO,IAAI,CAACmB,aAAa,CACxB,OAAOlD,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG6D,MAAM,CAAC7D,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CACtE;QACF;MACD;IACD;IACA;IACA,OAAO,IAAI;EACZ;EAEA;;;;;EAKA;EACO8D,WAAWA,CAACtE,SAA6B;;IAC/C,MAAMjC,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C,MAAMqB,GAAG,GAAG,CAAArE,EAAA,OAAI,CAACsF,YAAY,CAACvE,QAAQ,CAAC,cAAAf,EAAA,uBAAAA,EAAA,CAAEqE,GAAG;IAC5C;IACA,IAAIA,GAAG,KAAK1C,SAAS,IAAI0C,GAAG,KAAK,IAAI,EAAE;MACtC;MACA,OAAO,IAAI;IACZ;IACA,OAAON,MAAM,CAACM,GAAG,CAAC;EACnB;EAEA;;;;;;;EAOOkD,eAAeA,CAAC5D,YAAqB,EAAEX,SAA6B;IAC1E,MAAMc,WAAW,GAAGhF,MAAM,CAAC6E,YAAY,EAAE/E,UAAU,CAACmF,MAAM,CAAC;IAC3D,MAAMhD,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C,MAAMM,KAAK,GAAG,IAAI,CAACoD,aAAa,CAAC3F,QAAQ,CAAC;IAC1C,OAAO,OAAOuC,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAKS,MAAM,CAAC,CAAC,CAAC,GAAGT,KAAK,KAAKQ,WAAW,GAAG,KAAK;EACxF;EAEA;;;;;EAKA;EACO0D,4BAA4BA,CAACxE,SAA6B;;IAChE,MAAMjC,QAAQ,GAAG,CAAAf,EAAA,GAACgD,SAAsB,cAAAhD,EAAA,cAAAA,EAAA,GAAI,IAAI,CAACgD,SAAS;IAC1D,MAAMmB,GAAG,GAAG,IAAI,CAAC5E,SAAS,EAAE;IAC5B,IAAImF,OAAO,GAAGP,GAAG,CAACI,SAAS,CAACxB,EAAE,IAAKA,EAAE,CAAC1C,IAAiB,KAAKU,QAAQ,CAAC;IACrE;IACA;IACA,IAAIA,QAAQ,KAAKzB,QAAQ,CAACsD,KAAK,EAAE;MAChC8B,OAAO,IAAI,CAAC;IACb;IACA;IACA,IAAIA,OAAO,GAAG,CAAC,EAAE;MAChB;MACA,OAAO,IAAI;IACZ;IAEA,IAAI+C,iBAAiB,GAAG,CAAA/E,EAAA,GAAAyB,GAAG,CAACO,OAAO,CAAC,CAACT,SAAS,cAAAvB,EAAA,cAAAA,EAAA,GAAIyB,GAAG,CAACO,OAAO,CAAC,CAACpB,KAAK;IACpEmE,iBAAiB;IAChB;IACAA,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK9F,SAAS,GAC1DuC,MAAM,CAACuD,iBAAiB,CAAC;IACzB;IACA,IAAI;IAER,MAAMC,MAAM,GAAGvD,GAAG,CAACM,KAAK,CAACC,OAAO,GAAG,CAAC,CAAC,CAACiD,IAAI,CAAC5E,EAAE,IAAG;;MAC/C,IAAI6E,aAAa,GAAG,CAAA5H,EAAA,GAAA+C,EAAE,CAACkB,SAAS,cAAAjE,EAAA,cAAAA,EAAA,GAAI+C,EAAE,CAACO,KAAK;MAC5CsE,aAAa;MACZ;MACAA,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAKjG,SAAS,GAClDuC,MAAM,CAAC0D,aAAa,CAAC;MACrB;MACA,IAAI;MACR,OACE7E,EAAE,CAAC1C,IAAiB,KAAKf,QAAQ,CAACsD,KAAK;MACxC;MACAgF,aAAa,KAAK,IAAI,IACtBA,aAAa,KAAKjG,SAAS,IAC3BiG,aAAa,KAAKH,iBAAiB;IAErC,CAAC,CAAC;IACF;IACA,IAAIC,MAAM,KAAK/F,SAAS,EAAE;MACzB;MACA,OAAO,IAAI;IACZ;IAEA,MAAMkG,WAAW,GAAG,CAAAC,EAAA,GAAAJ,MAAM,CAACzD,SAAS,cAAA6D,EAAA,cAAAA,EAAA,GAAIJ,MAAM,CAACpE,KAAK;IACpD;IACA,IAAIuE,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKlG,SAAS,EAAE;MACtD;MACA,OAAO,IAAI;IACZ;IAEA,OAAOoC,MAAM,CAAC8D,WAAW,CAAC;EAC3B;EAEA;;;;;;EAMA;EACOE,iBAAiBA,CAAC/E,SAA6B;;IACrD,MAAMjC,QAAQ,GAAG,CAAAf,EAAA,GAACgD,SAAsB,cAAAhD,EAAA,cAAAA,EAAA,GAAI,IAAI,CAACgD,SAAS;IAC1D,IAAIyD,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC3F,QAAQ,CAAC;IAC1C;IACA;IACA;IACA,IAAI0F,OAAO,KAAK,IAAI,IAAI1F,QAAQ,KAAKzB,QAAQ,CAACsD,KAAK,EAAE;MACpD,MAAMuB,GAAG,GAAG,IAAI,CAAC5E,SAAS,EAAE;MAC5B;MACA,MAAM+E,UAAU,GAAGH,GAAG,CAACI,SAAS,CAACxB,EAAE,IAAIA,EAAE,CAACsB,GAAG,KAAK,IAAI,IAAItB,EAAE,CAACsB,GAAG,KAAK1C,SAAS,CAAC;MAC/E,IAAI2C,UAAU,GAAG,CAAC,EAAE;QACnB,MAAMpD,KAAK,CAAC,uCAAuC,CAAC;MACrD;MACAuF,OAAO,GAAG,IAAI,CAACC,aAAa,CAACvC,GAAG,CAACG,UAAU,GAAG,CAAC,CAAC,CAACjE,IAAI,CAAC;IACvD;IACA;IACA,IAAIoG,OAAO,KAAK,IAAI,EAAE;MACrB;MACA,OAAO,IAAI;IACZ;IACA;IACA;IACA;IACA;IACA;IACA,MAAMoB,WAAW,GAAG,IAAI,CAACtI,SAAS,EAAE,CAACwF,MAAM,CAAC,CAACC,GAAkB,EAAEjC,EAAkB,KAAI;MACtF;MACA,MAAMO,KAAK,GAAGS,MAAM;MACnB;MACAhB,EAAE,CAACO,KAAK,KAAK,IAAI,IAAKP,EAAE,CAACsB,GAAG,KAAK1C,SAAS,IAAIoB,EAAE,CAACsB,GAAG,KAAK,IAAK,GAAG,CAAC,GAAGtB,EAAE,CAACO,KAAK,CAC7E;MACD;MACA;MACA,OAAOA,KAAK,GAAGmD,OAAO,IAAIzB,GAAG,KAAK,IAAI,GAAG1B,KAAK,GAAG0B,GAAG;MACpD;IACD,CAAC,EAAE,IAAI,CAAC;IACR,OAAO6C,WAAW;EACnB;EAEA;;;;;;;EAOOG,mBAAmBA,CAACrE,YAAqB,EAAEX,SAA6B;IAC9E,MAAMc,WAAW,GAAGhF,MAAM,CAAC6E,YAAY,EAAE/E,UAAU,CAACmF,MAAM,CAAC;IAC3D,MAAMhD,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C;IACA,MAAM+E,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAAChH,QAAQ,CAAC;IAC1D;IACA,OAAOgH,iBAAiB,KAAK,IAAI,GAAG,KAAK,GAAGA,iBAAiB,KAAKjE,WAAW;EAC9E;EAEA;;;;;;EAMOmE,aAAaA,CAAClH,QAA2B,EAAEO,WAAuB;IACxE,IAAI4G,YAAY,GAAG,IAAIC,UAAU,EAAE;IACnC,IAAIC,eAAe,GAAG,CAAC;IACvB,KAAK,MAAMrF,EAAE,IAAI,IAAI,CAACxD,SAAS,EAAE,EAAE;MAClC,MAAM;QAAE+D,KAAK;QAAEW,SAAS;QAAE5D;MAAI,CAAE,GAAG0C,EAAE;MACrC;MACA;MACA,IAAIsF,WAAW,GAAGpE,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIX,KAAK;MACpC;MACA+E,WAAW,GAAGA,WAAW,KAAK,IAAI,GAAGnE,MAAM,CAACmE,WAAW,CAAC,GAAG,IAAI;MAE/D;MACA;MACA;MACA,IACC,OAAOA,WAAW,KAAK,QAAQ,IAC/BA,WAAW,KAAK,CAAC,IACjBA,WAAW,KAAKD,eAAe,IAC9B/H,IAAiB,KAAKf,QAAQ,CAACsD,KAAK,EACpC;QACD,MAAM0F,iBAAiB,GAAG5J,UAAU,CAAC2J,WAAW,CAACnG,QAAQ,CAAC,EAAE,CAAC,CAACqG,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAChFL,YAAY,GAAGvJ,gBAAgB,CAACuJ,YAAY,EAAEI,iBAAiB,CAAC;QAChEF,eAAe,GAAGC,WAAW;MAC9B;MAEA,IAAItF,EAAE,CAAC1C,IAAI,KAAKU,QAAQ,EAAE;IAC3B;IACA,MAAMyH,eAAe,GAAG7J,gBAAgB,CAAC2C,WAAW,EAAE4G,YAAY,CAAC;IAEnE;IACA;IACA;IACA,MAAMO,QAAQ,GAAGhK,UAAU,CAACI,eAAe,CAACa,eAAe,CAAC8I,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IACpF,OAAOC,QAAQ;EAChB;EAEA;;;;;EAKOC,QAAQA,CAAC1F,SAA6B,EAAE1B,WAAwB;IACtE,MAAMP,QAAQ,GAAGiC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI,CAACA,SAAS;IAC5C,MAAM2F,IAAI,GAAG,IAAI,CAACrD,YAAY,CAACvE,QAAQ,CAAC;IACxC;IACC;IACA4H,IAAI,KAAK,IAAI;IACb;IACC,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAErF,KAAK,MAAK,IAAI,IAAI,CAAAqF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE1E,SAAS,MAAKtC,SAAS,IAAI,CAAAgH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEtE,GAAG,MAAK1C,SAAU,EACjF;MACD,MAAMiH,GAAG,GAAG,uDAAuD;MACnE,MAAM,IAAI1H,KAAK,CAAC0H,GAAG,CAAC;IACrB;IACA;IACA,IAAI,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAED,QAAQ,MAAK,IAAI,IAAI,CAAAC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAED,QAAQ,MAAK/G,SAAS,EAAE;MAC5D,OAAOgH,IAAI,CAACD,QAAQ;IACrB;IACA,IAAI,CAACpH,WAAW,EAAE,MAAM,IAAIJ,KAAK,CAAC,+CAA+C,CAAC;IAClF,OAAO,IAAI,CAAC+G,aAAa,CAAClH,QAAQ,EAAEO,WAAW,CAAC;EACjD;EAEA;;;;;EAKA;EACOuH,mBAAmBA,CAACH,QAAgB;IAC1C,MAAMI,QAAQ,GAAG,IAAI,CAACvJ,SAAS,EAAE,CAAC6E,MAAM,CAAErB,EAAkB,IAAKA,EAAE,CAAC2F,QAAQ,KAAKA,QAAQ,CAAC;IAC1F;IACA,OAAOI,QAAQ,CAAC3F,MAAM,IAAI,CAAC,GAAG2F,QAAQ,CAACA,QAAQ,CAAC3F,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;EACnE;EAEA;;;;;EAKOvB,aAAaA,CAACN,WAAuB;;IAC3C,KAAK,MAAMyB,EAAE,IAAI,IAAI,CAACxD,SAAS,EAAE,EAAE;MAClC,MAAM8I,WAAW,GAAG,CAAArI,EAAA,GAAA+C,EAAE,CAACkB,SAAS,cAAAjE,EAAA,cAAAA,EAAA,GAAI+C,EAAE,CAACO,KAAK;MAC5C;MACC;MACA,CAACP,EAAE,CAAC2F,QAAQ,KAAK,IAAI,IAAI3F,EAAE,CAAC2F,QAAQ,KAAK/G,SAAS;MAClD;MACE0G,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK1G,SAAS,IAClD,OAAOoB,EAAE,CAACsB,GAAG,KAAK,WAAW,CAAC,EAC9B;QACDtB,EAAE,CAAC2F,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC3F,EAAE,CAAC1C,IAAI,EAAEiB,WAAW,CAAC;MAClD;IACD;EACD;EAEA;;;;EAIOyH,OAAOA,CAAA;IACb,OAAO,IAAI,CAACxG,YAAY,CAACwG,OAAO;EACjC;EAEA;;;;EAIOxJ,SAASA,CAAA;IACf,OAAO,IAAI,CAACgD,YAAY,CAAChD,SAAS;EACnC;EAEA;;;;EAIOyJ,cAAcA,CAAA;IACpB,OAAO,IAAI,CAACzG,YAAY,CAACyG,cAAc;EACxC;EAEA;;;;EAIOC,WAAWA,CAAA;IACjB,OAAO,IAAI,CAAC1G,YAAY,CAAC0G,WAAY;EACtC;EAEA;;;;EAIOlI,QAAQA,CAAA;IACd,OAAO,IAAI,CAACiC,SAAS;EACtB;EAEA;;;;EAIOxC,OAAOA,CAAA;IACb,OAAOuD,MAAM,CAAC,IAAI,CAACxB,YAAY,CAAC/B,OAAO,CAAC;EACzC;EAEA;;;;EAIO0I,SAASA,CAAA;IACf,OAAO,IAAI,CAAC3G,YAAY,CAAClC,IAAI;EAC9B;EAEA;;;;EAIOI,SAASA,CAAA;IACf,OAAOsD,MAAM,CAAC,IAAI,CAACxB,YAAY,CAAC9B,SAAS,CAAC;EAC3C;EAEA;;;;EAIOY,IAAIA,CAAA;IACV,OAAO,IAAI,CAACgB,KAAK;EAClB;EAEA;;;;;;EAMO8G,aAAaA,CAAA;IACnB,MAAMpI,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IAEhC,IAAIiF,KAAK;IACT,KAAK,MAAMxC,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C,IAAI,WAAW,IAAIW,SAAS,CAAC,CAAC,CAAC,EAAE;QAChC;QACAwC,KAAK,GAAGxC,SAAS,CAAC,CAAC,CAAC,CAAC4F,SAAS,CAACC,IAAI;MACpC;MACA,IAAI7F,SAAS,CAAC,CAAC,CAAC,KAAKzC,QAAQ,EAAE;IAChC;IACA;IACA,OAAOiF,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,IAAI,CAACzD,YAAY,CAAC6G,SAAS,CAACC,IAAI;EACjD;EAEA;;;;;;;;;EASOC,kBAAkBA,CAAA;IACxB,MAAMvI,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IAEhC,IAAIiF,KAAK;IACT,KAAK,MAAMxC,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C,IAAI,WAAW,IAAIW,SAAS,CAAC,CAAC,CAAC,EAAE;QAChC;QACAwC,KAAK,GAAGxC,SAAS,CAAC,CAAC,CAAC,CAAC4F,SAAS,CAACG,SAAS;MACzC;MACA,IAAI/F,SAAS,CAAC,CAAC,CAAC,KAAKzC,QAAQ,EAAE;IAChC;IACA;IACA,OAAOiF,KAAK,aAALA,KAAK,cAALA,KAAK,GAAK,IAAI,CAACzD,YAAY,CAAC6G,SAAS,CAACG,SAAgC;EAC9E;EAEA;;;;;;;;;;;;;EAaOC,eAAeA,CAAA;;IACrB,MAAMzI,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IAEhC,IAAIiF,KAAK;IACT,KAAK,MAAMxC,SAAS,IAAI,IAAI,CAACX,gBAAgB,EAAE;MAC9C,IAAI,WAAW,IAAIW,SAAS,CAAC,CAAC,CAAC,EAAE;QAChC;QACA;QACAwC,KAAK,GAAGxC,SAAS,CAAC,CAAC,CAAC,CAAC4F,SAAS,CAAC5F,SAAS,CAAC,CAAC,CAAC,CAAC4F,SAAS,CAACG,SAAS,CAAC;MACjE;MACA,IAAI/F,SAAS,CAAC,CAAC,CAAC,KAAKzC,QAAQ,EAAE;IAChC;IACA;IACA,OACC,CAAAf,EAAA,GAAAgG,KAAK,aAALA,KAAK,cAALA,KAAK,GACL,IAAI,CAACzD,YAAY,CAAC6G,SAAS,CAAC,IAAI,CAACE,kBAAkB,EAAwB,CAAC,cAAAtJ,EAAA,cAAAA,EAAA,GAC5E,EAAE;EAEJ;EAEA;;;EAGOyJ,IAAIA,CAAA;IACV;IACA,MAAMA,IAAI,GAAGvJ,MAAM,CAACC,MAAM,CAACD,MAAM,CAACwJ,MAAM,CAACxJ,MAAM,CAACyJ,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;IAC5E;IACAF,IAAI,CAACG,kBAAkB,EAAE;IACzB;IACA,OAAOH,IAAI;EACZ;EAEO,OAAO1H,qBAAqBA,CAACL,YAA4B;IAC/D,MAAMO,KAAK,GAAc,EAAE;IAC3B,KAAK,MAAM,CAAC5B,IAAI,EAAEwJ,EAAE,CAAC,IAAI3J,MAAM,CAAC4J,OAAO,CAAC1K,KAAK,CAAC,EAAE;MAC/C6C,KAAK,CAAC4H,EAAE,CAAC,GAAGxJ,IAAI,CAAC0J,WAAW,EAAE;IAC/B;IACA,MAAMC,MAAM,GAAG;MAAE/K,OAAO;MAAED,MAAM;MAAEE;IAAO,CAAkB;IAC3D,IAAIwC,YAAY,EAAE;MACjB,KAAK,MAAMpB,KAAK,IAAIoB,YAAY,EAAE;QACjC,MAAM;UAAErB;QAAI,CAAE,GAAGC,KAAK;QACtB2B,KAAK,CAAC3B,KAAK,CAACE,OAAO,CAAC0B,QAAQ,EAAE,CAAC,GAAG7B,IAAI;QACtC2J,MAAM,CAAC3J,IAAI,CAAC,GAAGC,KAAK;MACrB;IACD;IACA0J,MAAM,CAAC/H,KAAK,GAAGA,KAAK;IACpB,OAAO+H,MAAM;EACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}