{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3Context, Web3ConfigEvent } from 'web3-core';\nimport { ContractExecutionError, ContractTransactionDataAndInputError, SubscriptionError, Web3ContractError } from 'web3-errors';\nimport { createAccessList, call, estimateGas, getLogs, sendTransaction, decodeEventABI, NewHeadsSubscription, ALL_EVENTS, ALL_EVENTS_ABI } from 'web3-eth';\nimport { decodeFunctionCall, decodeFunctionReturn, encodeEventSignature, encodeFunctionSignature, decodeContractErrorData, isAbiErrorFragment, isAbiEventFragment, isAbiFunctionFragment, jsonInterfaceMethodToString } from 'web3-eth-abi';\nimport { BlockTags } from 'web3-types';\nimport { format, isDataFormat, keccak256, toChecksumAddress, isContractInitOptions } from 'web3-utils';\nimport { isNullish, validator, utils as validatorUtils, Web3ValidatorError } from 'web3-validator';\nimport { encodeEventABI, encodeMethodABI } from './encoding.js';\nimport { ContractLogsSubscription } from './contract_log_subscription.js';\nimport { getCreateAccessListParams, getEstimateGasParams, getEthTxCallParams, getSendTxParams, isWeb3ContractContext } from './utils.js';\n// eslint-disable-next-line import/no-cycle\nimport { DeployerMethodClass } from './contract-deployer-method-class.js';\n// eslint-disable-next-line import/no-cycle\nimport { ContractSubscriptionManager } from './contract-subscription-manager.js';\nconst contractSubscriptions = {\n  logs: ContractLogsSubscription,\n  newHeads: NewHeadsSubscription,\n  newBlockHeaders: NewHeadsSubscription\n};\n/**\n * The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.\n * For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.\n * ```ts\n *\n * import { Web3 } from 'web3';\n *\n * const web3 = new Web3('https://127.0.0.1:4545');\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.\n * ```ts\n *\n * import { Web3Context } from 'web3-core';\n * import { Contract } from 'web3-eth-contract';\n *\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(\n * \tabi,\n * \t'0xdAC17F958D2ee523a2206206994597C13D831ec7'\n * \t new Web3Context('http://127.0.0.1:8545'));\n *\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * ## Generated Methods\n * Following methods are generated by web3.js contract object for each of contract functions by using its ABI.\n *\n * ### send\n * This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableTxOptions | NonPayableTxOptions\n *\n * #### Returns\n * [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event\n *\n * ```ts\n * // using the promise\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.then(function(receipt){\n * \t\t// other parts of code to use receipt\n * \t});\n *\n *\n * // using the event emitter\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.on('transactionHash', function(hash){\n * \t\t// ...\n * \t})\n * \t.on('confirmation', function(confirmationNumber, receipt){\n * \t\t// ...\n * \t})\n * \t.on('receipt', function(receipt){\n * \t\t// ...\n * \t})\n * \t.on('error', function(error, receipt) {\n * \t\t// ...\n * \t});\n *\n * ```\n *\n * ### call\n * This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise : having results of call\n *\n * ```ts\n *\n * let myContract = new web3.eth.Contract(abi, address);\n *\n * myContract.methods.myFunction().call()\n * .then(console.log);\n *\n * ```\n * ### estimateGas\n * Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.\n *\n * #### Parameters\n * options?: PayableCallOptions,\n * returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n *\n * #### Returns\n * Promise: The gas amount estimated.\n *\n * ```ts\n * const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .estimateGas();\n *\n * ```\n *\n * ### encodeABI\n * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contractâ€™s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().\n *\n * Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n *\n * #### Parameters\n * None\n *\n * #### Returns\n * String: The encoded ABI.\n *\n * ```ts\n * const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .encodeABI();\n *\n * ```\n *\n\n * ### decodeMethodData\n * Decodes the given ABI-encoded data, revealing both the method name and the parameters used in the smart contract call.\n * This function reverses the encoding process happens at the method `encodeABI`.\n * It's particularly useful for debugging and understanding the interactions with and between smart contracts.\n *\n * #### Parameters\n *\n * - `data` **HexString**: The string of ABI-encoded data that needs to be decoded. This should include the method signature and the encoded parameters.\n *\n * #### Returns\n *\n * - **Object**: This object combines both the decoded parameters and the method name in a readable format. Specifically, the returned object contains:\n *   - `__method__` **String**: The name of the contract method, reconstructed from the ABI.\n *   - `__length__` **Number**: The number of parameters decoded.\n *   - Additional properties representing each parameter by name, as well as their position and values.\n *\n * #### Example\n *\n * Given an ABI-encoded string from a transaction, you can decode this data to identify the method called and the parameters passed.\n * Here's a simplified example:\n *\n *\n * ```typescript\n * const GreeterAbi = [\n * \t{\n * \t\tinputs: [\n * \t\t\t{\n * \t\t\t\tinternalType: 'string',\n * \t\t\t\tname: '_greeting',\n * \t\t\t\ttype: 'string',\n * \t\t\t},\n * \t\t],\n * \t\tname: 'setGreeting',\n * \t\toutputs: [],\n * \t\ttype: 'function',\n * \t},\n * ];\n * const contract = new Contract(GreeterAbi); // Initialize with your contract's ABI\n *\n * // The ABI-encoded data string for \"setGreeting('Hello World')\"\n * const encodedData =\n * \t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000';\n *\n * try {\n * \tconst decoded = contract.decodeMethodData(encodedData);\n * \tconsole.log(decoded.__method__); // Outputs: \"setGreeting(string)\"\n * \tconsole.log(decoded); // Outputs the detailed parameter data\n * \t// This tells that the method called was `setGreeting` with a single string parameter \"Hello World\":\n * \t// {\n * \t//   __method__: 'setGreeting(string)',\n * \t//   __length__: 1,\n * \t//   '0': 'Hello World',\n * \t//   _greeting: 'Hello World'\n * \t// }\n * } catch (error) {\n * \tconsole.error(error);\n * }\n * ```\n *\n\n * ### createAccessList\n * This will create an access list a method execution will access when executed in the EVM.\n * Note: You must specify a from address and gas if itâ€™s not specified in options when instantiating parent contract object.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise: The generated access list for transaction.\n *\n * ```ts\n * const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)\n *     .createAccessList({\n *         from: \"0x9992695e1053bb737d3cfae4743dcfc4b94f203d\"\n *    });\n * ```\n *\n */\nexport class Contract extends Web3Context {\n  get subscriptionManager() {\n    return this._subscriptionManager;\n  }\n  constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {\n    var _a, _b, _c;\n    // eslint-disable-next-line no-nested-ternary\n    const options = isContractInitOptions(addressOrOptionsOrContext) ? addressOrOptionsOrContext : isContractInitOptions(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;\n    let contractContext;\n    if (isWeb3ContractContext(addressOrOptionsOrContext)) {\n      contractContext = addressOrOptionsOrContext;\n    } else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n      contractContext = optionsOrContextOrReturnFormat;\n    } else {\n      contractContext = contextOrReturnFormat;\n    }\n    let provider;\n    if (typeof addressOrOptionsOrContext === 'object' && 'provider' in addressOrOptionsOrContext) {\n      provider = addressOrOptionsOrContext.provider;\n    } else if (typeof optionsOrContextOrReturnFormat === 'object' && 'provider' in optionsOrContextOrReturnFormat) {\n      provider = optionsOrContextOrReturnFormat.provider;\n    } else if (typeof contextOrReturnFormat === 'object' && 'provider' in contextOrReturnFormat) {\n      provider = contextOrReturnFormat.provider;\n    } else {\n      provider = Contract.givenProvider;\n    }\n    super(Object.assign(Object.assign({}, contractContext), {\n      provider,\n      registeredSubscriptions: contractSubscriptions\n    }));\n    /**\n     * Set to true if you want contracts' defaults to sync with global defaults.\n     */\n    this.syncWithContext = false;\n    this._functions = {};\n    this._subscriptionManager = new ContractSubscriptionManager(super.subscriptionManager, this);\n    // Init protected properties\n    if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.wallet) {\n      this._wallet = contractContext.wallet;\n    }\n    if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.accountProvider) {\n      this._accountProvider = contractContext.accountProvider;\n    }\n    if (!isNullish(options) && !isNullish(options.data) && !isNullish(options.input) && this.config.contractDataInputFill !== 'both') throw new ContractTransactionDataAndInputError({\n      data: options.data,\n      input: options.input\n    });\n    this._overloadedMethodAbis = new Map();\n    // eslint-disable-next-line no-nested-ternary\n    const returnDataFormat = isDataFormat(contextOrReturnFormat) ? contextOrReturnFormat : isDataFormat(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat;\n    const address = typeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n    this.config.contractDataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;\n    this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n    if (this.defaultReturnFormat !== returnDataFormat) {\n      this.defaultReturnFormat = returnDataFormat;\n    }\n    if (!isNullish(address)) {\n      this._parseAndSetAddress(address, returnDataFormat);\n    }\n    this.options = {\n      address,\n      jsonInterface: this._jsonInterface,\n      gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,\n      gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,\n      from: options === null || options === void 0 ? void 0 : options.from,\n      input: options === null || options === void 0 ? void 0 : options.input,\n      data: options === null || options === void 0 ? void 0 : options.data\n    };\n    this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;\n    if (contractContext instanceof Web3Context) {\n      this.subscribeToContextEvents(contractContext);\n    }\n    Object.defineProperty(this.options, 'address', {\n      set: value => this._parseAndSetAddress(value, returnDataFormat),\n      get: () => this._address\n    });\n    Object.defineProperty(this.options, 'jsonInterface', {\n      set: value => this._parseAndSetJsonInterface(value, returnDataFormat),\n      get: () => this._jsonInterface\n    });\n    if (contractContext instanceof Web3Context) {\n      contractContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.setConfig({\n          [event.name]: event.newValue\n        });\n      });\n    }\n  }\n  setTransactionMiddleware(transactionMiddleware) {\n    this.transactionMiddleware = transactionMiddleware;\n  }\n  getTransactionMiddleware() {\n    return this.transactionMiddleware;\n  }\n  /**\n   * Subscribe to an event.\n   *\n   * ```ts\n   * await myContract.events.MyEvent([options])\n   * ```\n   *\n   * There is a special event `allEvents` that can be used to subscribe all events.\n   *\n   * ```ts\n   * await myContract.events.allEvents([options])\n   * ```\n   *\n   * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n   */\n  get events() {\n    return this._events;\n  }\n  /**\n   * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n   *\n   * The methods of this smart contract are available through:\n   *\n   * The name: `myContract.methods.myMethod(123)`\n   * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n   * The signature `myContract.methods['0x58cf5f10'](123)`\n   *\n   * This allows calling functions with same name but different parameters from the JavaScript contract object.\n   *\n   * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n   *\n   * ```ts\n   * // calling a method\n   * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   *\n   * // or sending and using a promise\n   * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   *\n   * // or sending and using the events\n   * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   * sendObject.on('transactionHash', function(hash){\n   *   ...\n   * });\n   * sendObject.on('receipt', function(receipt){\n   *   ...\n   * });\n   * sendObject.on('confirmation', function(confirmationNumber, receipt){\n   *   ...\n   * });\n   * sendObject.on('error', function(error, receipt) {\n   *   ...\n   * });\n   * ```\n   *\n   * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n   */\n  get methods() {\n    return this._methods;\n  }\n  /**\n   * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n   *\n   * @returns - The new contract instance.\n   *\n   * ```ts\n   * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n   *\n   * const contract2 = contract1.clone();\n   * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n   *\n   * (contract1.options.address !== contract2.options.address);\n   * > true\n   * ```\n   */\n  clone() {\n    let newContract;\n    if (this.options.address) {\n      newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], this.options.address, {\n        gas: this.options.gas,\n        gasPrice: this.options.gasPrice,\n        from: this.options.from,\n        input: this.options.input,\n        data: this.options.data,\n        provider: this.currentProvider,\n        syncWithContext: this.syncWithContext,\n        dataInputFill: this.config.contractDataInputFill\n      }, this.getContextObject());\n    } else {\n      newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], {\n        gas: this.options.gas,\n        gasPrice: this.options.gasPrice,\n        from: this.options.from,\n        input: this.options.input,\n        data: this.options.data,\n        provider: this.currentProvider,\n        syncWithContext: this.syncWithContext,\n        dataInputFill: this.config.contractDataInputFill\n      }, this.getContextObject());\n    }\n    if (this.context) newContract.subscribeToContextEvents(this.context);\n    return newContract;\n  }\n  /**\n   * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n   *\n   * ```ts\n   * myContract.deploy({\n   *   input: '0x12345...', // data keyword can be used, too.\n   *   arguments: [123, 'My String']\n   * })\n   * .send({\n   *   from: '0x1234567890123456789012345678901234567891',\n   *   gas: 1500000,\n   *   gasPrice: '30000000000000'\n   * }, function(error, transactionHash){ ... })\n   * .on('error', function(error){ ... })\n   * .on('transactionHash', function(transactionHash){ ... })\n   * .on('receipt', function(receipt){\n   *  console.log(receipt.contractAddress) // contains the new contract address\n   * })\n   * .on('confirmation', function(confirmationNumber, receipt){ ... })\n   * .then(function(newContractInstance){\n   *   console.log(newContractInstance.options.address) // instance with the new contract address\n   * });\n   *\n   *\n   * // When the data is already set as an option to the contract itself\n   * myContract.options.data = '0x12345...';\n   *\n   * myContract.deploy({\n   *   arguments: [123, 'My String']\n   * })\n   * .send({\n   *   from: '0x1234567890123456789012345678901234567891',\n   *   gas: 1500000,\n   *   gasPrice: '30000000000000'\n   * })\n   * .then(function(newContractInstance){\n   *   console.log(newContractInstance.options.address) // instance with the new contract address\n   * });\n   *\n   *\n   * // Simply encoding\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   arguments: [123, 'My String']\n   * })\n   * .encodeABI();\n   * > '0x12345...0000012345678765432'\n   *\n   *\n   * // decoding\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments\n   * })\n   * .decodeData('0x12345...0000012345678765432');\n   * > {\n   *      __method__: 'constructor',\n   *      __length__: 2,\n   *      '0': '123',\n   *      _id: '123',\n   *      '1': 'My Greeting',\n   *      _greeting: 'My Greeting',\n   *   }\n   *\n   *\n   * // Gas estimation\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   arguments: [123, 'My String']\n   * })\n   * .estimateGas(function(err, gas){\n   *   console.log(gas);\n   * });\n   * ```\n   *\n   * @returns - The transaction object\n   */\n  deploy(deployOptions) {\n    return new DeployerMethodClass(this, deployOptions);\n  }\n  getPastEvents(param1, param2, param3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      const eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n      const options =\n      // eslint-disable-next-line no-nested-ternary\n      typeof param1 !== 'string' && !isDataFormat(param1) ? param1 : !isDataFormat(param2) ? param2 : {};\n      // eslint-disable-next-line no-nested-ternary\n      const returnFormat = isDataFormat(param1) ? param1 : isDataFormat(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : this.defaultReturnFormat;\n      const abi = eventName === 'allEvents' || eventName === ALL_EVENTS ? ALL_EVENTS_ABI : this._jsonInterface.find(j => 'name' in j && j.name === eventName);\n      if (!abi) {\n        throw new Web3ContractError(`Event ${String(eventName)} not found.`);\n      }\n      const {\n        fromBlock,\n        toBlock,\n        topics,\n        address\n      } = encodeEventABI(this.options, abi, options !== null && options !== void 0 ? options : {});\n      const logs = yield getLogs(this, {\n        fromBlock,\n        toBlock,\n        topics,\n        address\n      }, returnFormat);\n      const decodedLogs = logs ? logs.map(log => typeof log === 'string' ? log : decodeEventABI(abi, log, this._jsonInterface, returnFormat)) : [];\n      const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n      const filterKeys = Object.keys(filter);\n      if (filterKeys.length > 0) {\n        return decodedLogs.filter(log => {\n          if (typeof log === 'string') return true;\n          return filterKeys.every(key => {\n            var _a;\n            if (Array.isArray(filter[key])) {\n              return filter[key].some(v => String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());\n            }\n            const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter(input => input.name === key)[0];\n            if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === 'string') {\n              const hashedIndexedString = keccak256(filter[key]);\n              if (hashedIndexedString === String(log.returnValues[key])) return true;\n            }\n            return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();\n          });\n        });\n      }\n      return decodedLogs;\n    });\n  }\n  _parseAndSetAddress(value, returnFormat = this.defaultReturnFormat) {\n    this._address = value ? toChecksumAddress(format({\n      format: 'address'\n    }, value, returnFormat)) : value;\n  }\n  decodeMethodData(data) {\n    const methodSignature = data.slice(0, 10);\n    const functionsAbis = this._jsonInterface.filter(j => j.type !== 'error');\n    const abi = functionsAbis.find(a => methodSignature === encodeFunctionSignature(jsonInterfaceMethodToString(a)));\n    if (!abi) {\n      throw new Web3ContractError(`The ABI for the provided method signature ${methodSignature} was not found.`);\n    }\n    return decodeFunctionCall(abi, data);\n  }\n  _parseAndSetJsonInterface(abis, returnFormat = this.defaultReturnFormat) {\n    var _a, _b;\n    this._functions = {};\n    this._methods = {};\n    this._events = {};\n    let result = [];\n    const functionsAbi = abis.filter(abi => abi.type !== 'error');\n    const errorsAbi = abis.filter(abi => isAbiErrorFragment(abi));\n    for (const a of functionsAbi) {\n      const abi = Object.assign(Object.assign({}, a), {\n        signature: ''\n      });\n      if (isAbiFunctionFragment(abi)) {\n        const methodName = jsonInterfaceMethodToString(abi);\n        const methodSignature = encodeFunctionSignature(methodName);\n        abi.methodNameWithInputs = methodName;\n        abi.signature = methodSignature;\n        // make constant and payable backwards compatible\n        abi.constant = abi.stateMutability === 'view' || abi.stateMutability === 'pure' || abi.constant;\n        abi.payable = abi.stateMutability === 'payable' || abi.payable;\n        this._overloadedMethodAbis.set(abi.name, [...((_a = this._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : []), abi]);\n        const abiFragment = (_b = this._overloadedMethodAbis.get(abi.name)) !== null && _b !== void 0 ? _b : [];\n        const contractMethod = this._createContractMethod(abiFragment, errorsAbi);\n        const exactContractMethod = this._createContractMethod(abiFragment, errorsAbi, true);\n        this._functions[methodName] = {\n          signature: methodSignature,\n          method: exactContractMethod\n        };\n        // We don't know a particular type of the Abi method so can't type check\n        this._methods[abi.name] = contractMethod;\n        // We don't know a particular type of the Abi method so can't type check\n        this._methods[methodName] = exactContractMethod;\n        // We don't know a particular type of the Abi method so can't type check\n        this._methods[methodSignature] = exactContractMethod;\n      } else if (isAbiEventFragment(abi)) {\n        const eventName = jsonInterfaceMethodToString(abi);\n        const eventSignature = encodeEventSignature(eventName);\n        const event = this._createContractEvent(abi, returnFormat);\n        abi.signature = eventSignature;\n        if (!(eventName in this._events) || abi.name === 'bound') {\n          // It's a private type and we don't want to expose it and no need to check\n          this._events[eventName] = event;\n        }\n        // It's a private type and we don't want to expose it and no need to check\n        this._events[abi.name] = event;\n        // It's a private type and we don't want to expose it and no need to check\n        this._events[eventSignature] = event;\n      }\n      result = [...result, abi];\n    }\n    this._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n    this._jsonInterface = [...result];\n    this._errorsInterface = errorsAbi;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _getAbiParams(abi, params) {\n    var _a;\n    try {\n      return validatorUtils.transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);\n    } catch (error) {\n      throw new Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);\n    }\n  }\n  _createContractMethod(abiArr, errorsAbis, exact = false) {\n    const abi = abiArr[abiArr.length - 1];\n    return (...params) => {\n      var _a, _b, _c;\n      let abiParams;\n      const abis = (_b = exact ? (_a = this._overloadedMethodAbis.get(abi.name)) === null || _a === void 0 ? void 0 : _a.filter(_abi => _abi.signature === abi.signature) : this._overloadedMethodAbis.get(abi.name)) !== null && _b !== void 0 ? _b : [];\n      let methodAbi = abis[0];\n      const internalErrorsAbis = errorsAbis;\n      const arrayOfAbis = abis.filter(_abi => {\n        var _a;\n        return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;\n      });\n      if (abis.length === 1 || arrayOfAbis.length === 0) {\n        abiParams = this._getAbiParams(methodAbi, params);\n        validator.validate((_c = abi.inputs) !== null && _c !== void 0 ? _c : [], abiParams);\n      } else {\n        const errors = [];\n        // all the methods that have is valid for the given inputs\n        const applicableMethodAbi = [];\n        for (const _abi of arrayOfAbis) {\n          try {\n            abiParams = this._getAbiParams(_abi, params);\n            validator.validate(_abi.inputs, abiParams);\n            applicableMethodAbi.push(_abi);\n          } catch (e) {\n            errors.push(e);\n          }\n        }\n        if (applicableMethodAbi.length === 1) {\n          [methodAbi] = applicableMethodAbi; // take the first item that is the only item in the array\n        } else if (applicableMethodAbi.length > 1) {\n          [methodAbi] = applicableMethodAbi; // take the first item in the array\n          console.warn(`Multiple methods found that is compatible with the given inputs.\\n\\tFound ${applicableMethodAbi.length} compatible methods: ${JSON.stringify(applicableMethodAbi.map(m => `${m.methodNameWithInputs} (signature: ${m.signature})`))} \\n\\tThe first one will be used: ${methodAbi.methodNameWithInputs}`);\n          // TODO: 5.x Should throw a new error with the list of methods found.\n          // Related issue: https://github.com/web3/web3.js/issues/6923\n          // This is in order to provide an error message when there is more than one method found that fits the inputs.\n          // To do that, replace the pervious line of code with something like the following line:\n          // throw new Web3ValidatorError({ message: 'Multiple methods found',  ... list of applicable methods }));\n        }\n        if (errors.length === arrayOfAbis.length) {\n          throw new Web3ValidatorError(errors);\n        }\n      }\n      const methods = {\n        arguments: abiParams,\n        call: (options, block) => __awaiter(this, void 0, void 0, function* () {\n          return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);\n        }),\n        send: options => this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n        populateTransaction: (options, contractOptions) => {\n          var _a, _b;\n          let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n          modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            input: undefined,\n            from: (_b = (_a = modifiedContractOptions === null || modifiedContractOptions === void 0 ? void 0 : modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n          });\n          const tx = getSendTxParams({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n              dataInputFill: this.config.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n          });\n          // @ts-expect-error remove unnecessary field\n          if (tx.dataInputFill) {\n            // @ts-expect-error remove unnecessary field\n            delete tx.dataInputFill;\n          }\n          return tx;\n        },\n        estimateGas: (options_1, ...args_1) => __awaiter(this, [options_1, ...args_1], void 0, function* (options, returnFormat = this.defaultReturnFormat) {\n          return this.contractMethodEstimateGas({\n            abi: methodAbi,\n            params: abiParams,\n            returnFormat,\n            options\n          });\n        }),\n        encodeABI: () => encodeMethodABI(methodAbi, abiParams),\n        decodeData: data => decodeFunctionCall(methodAbi, data),\n        createAccessList: (options, block) => __awaiter(this, void 0, void 0, function* () {\n          return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);\n        })\n      };\n      if (methodAbi.stateMutability === 'payable') {\n        return methods;\n      }\n      return methods;\n    };\n  }\n  _contractMethodCall(abi, params, errorsAbi, options, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      const tx = getEthTxCallParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: Object.assign(Object.assign({}, this.options), {\n          from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n        })\n      });\n      try {\n        const result = yield call(this, tx, block, this.defaultReturnFormat);\n        return decodeFunctionReturn(abi, result);\n      } catch (error) {\n        if (error instanceof ContractExecutionError) {\n          // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n          decodeContractErrorData(errorsAbi, error.cause);\n        }\n        throw error;\n      }\n    });\n  }\n  _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      const tx = getCreateAccessListParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: Object.assign(Object.assign({}, this.options), {\n          from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n        })\n      });\n      try {\n        return createAccessList(this, tx, block, this.defaultReturnFormat);\n      } catch (error) {\n        if (error instanceof ContractExecutionError) {\n          // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n          decodeContractErrorData(errorsAbi, error.cause);\n        }\n        throw error;\n      }\n    });\n  }\n  _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {\n    var _a, _b;\n    let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n    modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n      input: undefined,\n      from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n    });\n    const tx = getSendTxParams({\n      abi,\n      params,\n      options: Object.assign(Object.assign({}, options), {\n        dataInputFill: this.config.contractDataInputFill\n      }),\n      contractOptions: modifiedContractOptions\n    });\n    const transactionToSend = isNullish(this.transactionMiddleware) ? sendTransaction(this, tx, this.defaultReturnFormat, {\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false,\n      contractAbi: this._jsonInterface // explicitly not passing middleware so if some one is using old eth package it will not break\n    }) : sendTransaction(this, tx, this.defaultReturnFormat, {\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false,\n      contractAbi: this._jsonInterface\n    }, this.transactionMiddleware);\n    // eslint-disable-next-line no-void\n    void transactionToSend.on('error', error => {\n      if (error instanceof ContractExecutionError) {\n        // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n        decodeContractErrorData(errorsAbi, error.cause);\n      }\n    });\n    return transactionToSend;\n  }\n  contractMethodEstimateGas(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      abi,\n      params,\n      returnFormat,\n      options,\n      contractOptions\n    }) {\n      const tx = getEstimateGasParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options\n      });\n      return estimateGas(this, tx, BlockTags.LATEST, returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat);\n    });\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _createContractEvent(abi, returnFormat = this.defaultReturnFormat) {\n    return (...params) => {\n      var _a;\n      const {\n        topics,\n        fromBlock\n      } = encodeEventABI(this.options, abi, params[0]);\n      const sub = new ContractLogsSubscription({\n        address: this.options.address,\n        topics,\n        abi,\n        jsonInterface: this._jsonInterface\n      }, {\n        subscriptionManager: this.subscriptionManager,\n        returnFormat\n      });\n      if (!isNullish(fromBlock)) {\n        // emit past events when fromBlock is defined\n        this.getPastEvents(abi.name, {\n          fromBlock,\n          topics\n        }, returnFormat).then(logs => {\n          if (logs) {\n            logs.forEach(log => sub.emit('data', log));\n          }\n        }).catch(error => {\n          sub.emit('error', new SubscriptionError('Failed to get past events.', error));\n        });\n      }\n      (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch(error => {\n        sub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n      });\n      return sub;\n    };\n  }\n  subscribeToContextEvents(context) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const contractThis = this;\n    this.context = context;\n    if (contractThis.syncWithContext) {\n      context.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n        contractThis.setConfig({\n          [event.name]: event.newValue\n        });\n      });\n    }\n  }\n}","map":{"version":3,"names":["Web3Context","Web3ConfigEvent","ContractExecutionError","ContractTransactionDataAndInputError","SubscriptionError","Web3ContractError","createAccessList","call","estimateGas","getLogs","sendTransaction","decodeEventABI","NewHeadsSubscription","ALL_EVENTS","ALL_EVENTS_ABI","decodeFunctionCall","decodeFunctionReturn","encodeEventSignature","encodeFunctionSignature","decodeContractErrorData","isAbiErrorFragment","isAbiEventFragment","isAbiFunctionFragment","jsonInterfaceMethodToString","BlockTags","format","isDataFormat","keccak256","toChecksumAddress","isContractInitOptions","isNullish","validator","utils","validatorUtils","Web3ValidatorError","encodeEventABI","encodeMethodABI","ContractLogsSubscription","getCreateAccessListParams","getEstimateGasParams","getEthTxCallParams","getSendTxParams","isWeb3ContractContext","DeployerMethodClass","ContractSubscriptionManager","contractSubscriptions","logs","newHeads","newBlockHeaders","Contract","subscriptionManager","_subscriptionManager","constructor","jsonInterface","addressOrOptionsOrContext","optionsOrContextOrReturnFormat","contextOrReturnFormat","returnFormat","options","undefined","contractContext","provider","givenProvider","Object","assign","registeredSubscriptions","syncWithContext","_functions","wallet","_wallet","accountProvider","_accountProvider","data","input","config","contractDataInputFill","_overloadedMethodAbis","Map","returnDataFormat","defaultReturnFormat","address","_a","dataInputFill","_parseAndSetJsonInterface","_parseAndSetAddress","_jsonInterface","gas","_b","gasLimit","gasPrice","from","_c","subscribeToContextEvents","defineProperty","set","value","get","_address","on","CONFIG_CHANGE","event","setConfig","name","newValue","setTransactionMiddleware","transactionMiddleware","getTransactionMiddleware","events","_events","methods","_methods","clone","newContract","_errorsInterface","currentProvider","getContextObject","context","deploy","deployOptions","getPastEvents","param1","param2","param3","eventName","abi","find","j","String","fromBlock","toBlock","topics","decodedLogs","map","log","filter","filterKeys","keys","length","every","key","Array","isArray","some","v","returnValues","toUpperCase","inputAbi","inputs","indexed","type","hashedIndexedString","decodeMethodData","methodSignature","slice","functionsAbis","a","abis","result","functionsAbi","errorsAbi","signature","methodName","methodNameWithInputs","constant","stateMutability","payable","abiFragment","contractMethod","_createContractMethod","exactContractMethod","method","eventSignature","_createContractEvent","allEvents","_getAbiParams","params","transformJsonDataToAbiFormat","error","message","abiArr","errorsAbis","exact","abiParams","_abi","methodAbi","internalErrorsAbis","arrayOfAbis","validate","errors","applicableMethodAbi","push","e","console","warn","JSON","stringify","m","arguments","block","__awaiter","_contractMethodCall","send","_contractMethodSend","populateTransaction","contractOptions","modifiedContractOptions","defaultAccount","tx","options_1","args_1","contractMethodEstimateGas","encodeABI","decodeData","_contractMethodCreateAccessList","cause","transactionToSend","checkRevertBeforeSending","contractAbi","LATEST","sub","then","forEach","emit","catch","addSubscription","contractThis"],"sources":["C:\\Users\\YUVRAJ\\OneDrive\\Desktop\\archdo_ai_eth\\frontend\\node_modules\\web3-eth-contract\\src\\contract.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tWeb3Context,\n\tWeb3EventEmitter,\n\tWeb3PromiEvent,\n\tWeb3ConfigEvent,\n\tWeb3SubscriptionManager,\n\tWeb3SubscriptionConstructor,\n} from 'web3-core';\nimport {\n\tContractExecutionError,\n\tContractTransactionDataAndInputError,\n\tSubscriptionError,\n\tWeb3ContractError,\n} from 'web3-errors';\nimport {\n\tcreateAccessList,\n\tcall,\n\testimateGas,\n\tgetLogs,\n\tsendTransaction,\n\tdecodeEventABI,\n\tNewHeadsSubscription,\n\tALL_EVENTS,\n\tALL_EVENTS_ABI,\n\tSendTransactionEvents,\n\tTransactionMiddleware,\n} from 'web3-eth';\nimport {\n\tdecodeFunctionCall,\n\tdecodeFunctionReturn,\n\tencodeEventSignature,\n\tencodeFunctionSignature,\n\tdecodeContractErrorData,\n\tisAbiErrorFragment,\n\tisAbiEventFragment,\n\tisAbiFunctionFragment,\n\tjsonInterfaceMethodToString,\n} from 'web3-eth-abi';\nimport {\n\tAbiErrorFragment,\n\tAbiEventFragment,\n\tAbiFragment,\n\tAbiFunctionFragment,\n\tContractAbi,\n\tContractConstructorArgs,\n\tContractEvent,\n\tContractEvents,\n\tContractMethod,\n\tContractMethodInputParameters,\n\tContractMethodOutputParameters,\n\tAddress,\n\tBlockNumberOrTag,\n\tBlockTags,\n\tEthExecutionAPI,\n\tFilter,\n\tFilterAbis,\n\tHexString,\n\tLogsInput,\n\tMutable,\n\tContractInitOptions,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tNumbers,\n\tWeb3ValidationErrorObject,\n\tEventLog,\n\tContractAbiWithSignature,\n\tContractOptions,\n\tTransactionReceipt,\n\tFormatType,\n\tDecodedParams,\n} from 'web3-types';\nimport {\n\tformat,\n\tisDataFormat,\n\tkeccak256,\n\ttoChecksumAddress,\n\tisContractInitOptions,\n} from 'web3-utils';\nimport {\n\tisNullish,\n\tvalidator,\n\tutils as validatorUtils,\n\tValidationSchemaInput,\n\tWeb3ValidatorError,\n} from 'web3-validator';\nimport { encodeEventABI, encodeMethodABI } from './encoding.js';\nimport { ContractLogsSubscription } from './contract_log_subscription.js';\nimport {\n\tContractEventOptions,\n\tNonPayableMethodObject,\n\tNonPayableTxOptions,\n\tPayableMethodObject,\n\tPayableTxOptions,\n\tWeb3ContractContext,\n} from './types.js';\nimport {\n\tgetCreateAccessListParams,\n\tgetEstimateGasParams,\n\tgetEthTxCallParams,\n\tgetSendTxParams,\n\tisWeb3ContractContext,\n} from './utils.js';\n// eslint-disable-next-line import/no-cycle\nimport { DeployerMethodClass } from './contract-deployer-method-class.js';\n// eslint-disable-next-line import/no-cycle\nimport { ContractSubscriptionManager } from './contract-subscription-manager.js';\n\ntype ContractBoundMethod<\n\tAbi extends AbiFunctionFragment,\n\tMethod extends ContractMethod<Abi> = ContractMethod<Abi>,\n> = (\n\t...args: Abi extends undefined\n\t\t? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t  any[]\n\t\t: Method['Inputs'] extends never\n\t\t? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t  any[]\n\t\t: Method['Inputs']\n) => Method['Abi']['stateMutability'] extends 'payable' | 'pure'\n\t? PayableMethodObject<Method['Inputs'], Method['Outputs']>\n\t: NonPayableMethodObject<Method['Inputs'], Method['Outputs']>;\n\nexport type ContractOverloadedMethodInputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodInputParameters<A['inputs']> | ContractOverloadedMethodInputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\nexport type ContractOverloadedMethodOutputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodOutputParameters<A['outputs']> | ContractOverloadedMethodOutputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractMethodsInterface<Abi extends ContractAbi> = {\n\t[MethodAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'function' }\n\t> as MethodAbi['name']]: ContractBoundMethod<MethodAbi>;\n\t// To allow users to use method signatures\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n} & { [key: string]: ContractBoundMethod<any> };\n\nexport type ContractMethodSend = Web3PromiEvent<\n\tFormatType<TransactionReceipt, DataFormat>,\n\tSendTransactionEvents<DataFormat>\n>;\n\n/**\n * @hidden\n * The event object can be accessed from `myContract.events.myEvent`.\n *\n * \\> Remember: To subscribe to an event, your provider must have support for subscriptions.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent([options])\n * ```\n *\n * @param options - The options used to subscribe for the event\n * @returns - A Promise resolved with {@link ContractLogsSubscription} object\n */\nexport type ContractBoundEvent = (options?: ContractEventOptions) => ContractLogsSubscription;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventsInterface<\n\tAbi extends ContractAbi,\n\tEvents extends ContractEvents<Abi> = ContractEvents<Abi>,\n> = {\n\t[Name in keyof Events | 'allEvents']: ContractBoundEvent;\n} & {\n\t[key: string]: ContractBoundEvent;\n};\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventEmitterInterface<Abi extends ContractAbi> = {\n\t[EventAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'event' }\n\t> as EventAbi['name']]: ContractEvent<EventAbi>['Inputs'];\n};\n\ntype EventParameters = Parameters<typeof encodeEventABI>[2];\n\nconst contractSubscriptions = {\n\tlogs: ContractLogsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tnewBlockHeaders: NewHeadsSubscription,\n};\n\ntype ContractSubscriptions = typeof contractSubscriptions;\n\n/**\n * The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.\n * For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.\n * ```ts\n *\n * import { Web3 } from 'web3';\n *\n * const web3 = new Web3('https://127.0.0.1:4545');\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.\n * ```ts\n *\n * import { Web3Context } from 'web3-core';\n * import { Contract } from 'web3-eth-contract';\n *\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(\n * \tabi,\n * \t'0xdAC17F958D2ee523a2206206994597C13D831ec7'\n * \t new Web3Context('http://127.0.0.1:8545'));\n *\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * ## Generated Methods\n * Following methods are generated by web3.js contract object for each of contract functions by using its ABI.\n *\n * ### send\n * This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableTxOptions | NonPayableTxOptions\n *\n * #### Returns\n * [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event\n *\n * ```ts\n * // using the promise\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.then(function(receipt){\n * \t\t// other parts of code to use receipt\n * \t});\n *\n *\n * // using the event emitter\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.on('transactionHash', function(hash){\n * \t\t// ...\n * \t})\n * \t.on('confirmation', function(confirmationNumber, receipt){\n * \t\t// ...\n * \t})\n * \t.on('receipt', function(receipt){\n * \t\t// ...\n * \t})\n * \t.on('error', function(error, receipt) {\n * \t\t// ...\n * \t});\n *\n * ```\n *\n * ### call\n * This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise : having results of call\n *\n * ```ts\n *\n * let myContract = new web3.eth.Contract(abi, address);\n *\n * myContract.methods.myFunction().call()\n * .then(console.log);\n *\n * ```\n * ### estimateGas\n * Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.\n *\n * #### Parameters\n * options?: PayableCallOptions,\n * returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n *\n * #### Returns\n * Promise: The gas amount estimated.\n *\n * ```ts\n * const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .estimateGas();\n *\n * ```\n *\n * ### encodeABI\n * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contractâ€™s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().\n *\n * Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n *\n * #### Parameters\n * None\n *\n * #### Returns\n * String: The encoded ABI.\n *\n * ```ts\n * const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .encodeABI();\n *\n * ```\n *\n\n * ### decodeMethodData\n * Decodes the given ABI-encoded data, revealing both the method name and the parameters used in the smart contract call.\n * This function reverses the encoding process happens at the method `encodeABI`.\n * It's particularly useful for debugging and understanding the interactions with and between smart contracts.\n *\n * #### Parameters\n *\n * - `data` **HexString**: The string of ABI-encoded data that needs to be decoded. This should include the method signature and the encoded parameters.\n *\n * #### Returns\n *\n * - **Object**: This object combines both the decoded parameters and the method name in a readable format. Specifically, the returned object contains:\n *   - `__method__` **String**: The name of the contract method, reconstructed from the ABI.\n *   - `__length__` **Number**: The number of parameters decoded.\n *   - Additional properties representing each parameter by name, as well as their position and values.\n *\n * #### Example\n *\n * Given an ABI-encoded string from a transaction, you can decode this data to identify the method called and the parameters passed.\n * Here's a simplified example:\n *\n *\n * ```typescript\n * const GreeterAbi = [\n * \t{\n * \t\tinputs: [\n * \t\t\t{\n * \t\t\t\tinternalType: 'string',\n * \t\t\t\tname: '_greeting',\n * \t\t\t\ttype: 'string',\n * \t\t\t},\n * \t\t],\n * \t\tname: 'setGreeting',\n * \t\toutputs: [],\n * \t\ttype: 'function',\n * \t},\n * ];\n * const contract = new Contract(GreeterAbi); // Initialize with your contract's ABI\n *\n * // The ABI-encoded data string for \"setGreeting('Hello World')\"\n * const encodedData =\n * \t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000';\n *\n * try {\n * \tconst decoded = contract.decodeMethodData(encodedData);\n * \tconsole.log(decoded.__method__); // Outputs: \"setGreeting(string)\"\n * \tconsole.log(decoded); // Outputs the detailed parameter data\n * \t// This tells that the method called was `setGreeting` with a single string parameter \"Hello World\":\n * \t// {\n * \t//   __method__: 'setGreeting(string)',\n * \t//   __length__: 1,\n * \t//   '0': 'Hello World',\n * \t//   _greeting: 'Hello World'\n * \t// }\n * } catch (error) {\n * \tconsole.error(error);\n * }\n * ```\n *\n\n * ### createAccessList\n * This will create an access list a method execution will access when executed in the EVM.\n * Note: You must specify a from address and gas if itâ€™s not specified in options when instantiating parent contract object.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise: The generated access list for transaction.\n *\n * ```ts\n * const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)\n *     .createAccessList({\n *         from: \"0x9992695e1053bb737d3cfae4743dcfc4b94f203d\"\n *    });\n * ```\n *\n */\nexport class Contract<Abi extends ContractAbi>\n\textends Web3Context<EthExecutionAPI, ContractSubscriptions>\n\timplements Web3EventEmitter<ContractEventEmitterInterface<Abi>>\n{\n\tprotected override _subscriptionManager: ContractSubscriptionManager<EthExecutionAPI>;\n\n\tpublic override get subscriptionManager(): ContractSubscriptionManager<EthExecutionAPI> {\n\t\treturn this._subscriptionManager;\n\t}\n\n\t/**\n\t * The options `object` for the contract instance. `from`, `gas` and `gasPrice` are used as fallback values when sending transactions.\n\t *\n\t * ```ts\n\t * myContract.options;\n\t * > {\n\t *     address: '0x1234567890123456789012345678901234567891',\n\t *     jsonInterface: [...],\n\t *     from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n\t *     gasPrice: '10000000000000',\n\t *     gas: 1000000\n\t * }\n\t *\n\t * myContract.options.from = '0x1234567890123456789012345678901234567891'; // default from address\n\t * myContract.options.gasPrice = '20000000000000'; // default gas price in wei\n\t * myContract.options.gas = 5000000; // provide as fallback always 5M gas\n\t * ```\n\t */\n\n\tpublic readonly options: ContractOptions;\n\tprivate transactionMiddleware?: TransactionMiddleware;\n\t/**\n\t * Set to true if you want contracts' defaults to sync with global defaults.\n\t */\n\tpublic syncWithContext = false;\n\n\tprivate _errorsInterface!: AbiErrorFragment[];\n\tprivate _jsonInterface!: ContractAbiWithSignature;\n\tprivate _address?: Address;\n\tprivate _functions: Record<\n\t\tstring,\n\t\t{\n\t\t\tsignature: string;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tmethod: ContractBoundMethod<any>;\n\t\t}\n\t> = {};\n\tprivate readonly _overloadedMethodAbis: Map<string, AbiFunctionFragment[]>;\n\tprivate _methods!: ContractMethodsInterface<Abi>;\n\tprivate _events!: ContractEventsInterface<Abi>;\n\t/**\n\t * Set property to `data`, `input`, or `both` to change the property of the contract being sent to the\n\t * RPC provider when using contract methods.\n\t * Default is `input`\n\t */\n\n\tprivate context?: Web3Context;\n\t/**\n\t * Creates a new contract instance with all its methods and events defined in its ABI provided.\n\t *\n\t * ```ts\n\t * new web3.eth.Contract(jsonInterface[, address][, options])\n\t * ```\n\t *\n\t * @param jsonInterface - The JSON interface for the contract to instantiate.\n\t * @param address - The address of the smart contract to call.\n\t * @param options - The options of the contract. Some are used as fallbacks for calls and transactions.\n\t * @param context - The context of the contract used for customizing the behavior of the contract.\n\t * @returns - The contract instance with all its methods and events.\n\t *\n\t * ```ts title=\"Example\"\n\t * var myContract = new web3.eth.Contract([...], '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe', {\n\t *   from: '0x1234567890123456789012345678901234567891', // default from address\n\t *   gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case\n\t * });\n\t * ```\n\t *\n\t * To use the type safe interface for these contracts you have to include the ABI definitions in your TypeScript project and then declare these as `const`.\n\t *\n\t * ```ts title=\"Example\"\n\t * const myContractAbi = [....] as const; // ABI definitions\n\t * const myContract = new web3.eth.Contract(myContractAbi, '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe');\n\t * ```\n\t */\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\tcontext?: Web3ContractContext | Web3Context,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress?: Address,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\toptions?: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress: Address | undefined,\n\t\toptions: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddressOrOptionsOrContext?:\n\t\t\t| Address\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context,\n\t\toptionsOrContextOrReturnFormat?:\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context\n\t\t\t| DataFormat,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t) {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst options = isContractInitOptions(addressOrOptionsOrContext)\n\t\t\t? addressOrOptionsOrContext\n\t\t\t: isContractInitOptions(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: undefined;\n\n\t\tlet contractContext;\n\t\tif (isWeb3ContractContext(addressOrOptionsOrContext)) {\n\t\t\tcontractContext = addressOrOptionsOrContext;\n\t\t} else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n\t\t\tcontractContext = optionsOrContextOrReturnFormat;\n\t\t} else {\n\t\t\tcontractContext = contextOrReturnFormat;\n\t\t}\n\n\t\tlet provider;\n\t\tif (\n\t\t\ttypeof addressOrOptionsOrContext === 'object' &&\n\t\t\t'provider' in addressOrOptionsOrContext\n\t\t) {\n\t\t\tprovider = addressOrOptionsOrContext.provider;\n\t\t} else if (\n\t\t\ttypeof optionsOrContextOrReturnFormat === 'object' &&\n\t\t\t'provider' in optionsOrContextOrReturnFormat\n\t\t) {\n\t\t\tprovider = optionsOrContextOrReturnFormat.provider;\n\t\t} else if (\n\t\t\ttypeof contextOrReturnFormat === 'object' &&\n\t\t\t'provider' in contextOrReturnFormat\n\t\t) {\n\t\t\tprovider = contextOrReturnFormat.provider;\n\t\t} else {\n\t\t\tprovider = Contract.givenProvider;\n\t\t}\n\n\t\tsuper({\n\t\t\t...contractContext,\n\t\t\tprovider,\n\t\t\tregisteredSubscriptions: contractSubscriptions,\n\t\t});\n\n\t\tthis._subscriptionManager = new ContractSubscriptionManager<\n\t\t\tEthExecutionAPI,\n\t\t\tContractSubscriptions\n\t\t>(super.subscriptionManager, this);\n\n\t\t// Init protected properties\n\t\tif ((contractContext as Web3Context)?.wallet) {\n\t\t\tthis._wallet = (contractContext as Web3Context).wallet;\n\t\t}\n\t\tif ((contractContext as Web3Context)?.accountProvider) {\n\t\t\tthis._accountProvider = (contractContext as Web3Context).accountProvider;\n\t\t}\n\n\t\tif (\n\t\t\t!isNullish(options) &&\n\t\t\t!isNullish(options.data) &&\n\t\t\t!isNullish(options.input) &&\n\t\t\tthis.config.contractDataInputFill !== 'both'\n\t\t)\n\t\t\tthrow new ContractTransactionDataAndInputError({\n\t\t\t\tdata: options.data as HexString,\n\t\t\t\tinput: options.input as HexString,\n\t\t\t});\n\t\tthis._overloadedMethodAbis = new Map<string, AbiFunctionFragment[]>();\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnDataFormat = isDataFormat(contextOrReturnFormat)\n\t\t\t? contextOrReturnFormat\n\t\t\t: isDataFormat(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: returnFormat ?? this.defaultReturnFormat;\n\t\tconst address =\n\t\t\ttypeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n\t\tthis.config.contractDataInputFill =\n\t\t\t(options as ContractInitOptions)?.dataInputFill ?? this.config.contractDataInputFill;\n\t\tthis._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n\n\t\tif (this.defaultReturnFormat !== returnDataFormat) {\n\t\t\tthis.defaultReturnFormat = returnDataFormat;\n\t\t}\n\n\t\tif (!isNullish(address)) {\n\t\t\tthis._parseAndSetAddress(address, returnDataFormat);\n\t\t}\n\n\t\tthis.options = {\n\t\t\taddress,\n\t\t\tjsonInterface: this._jsonInterface,\n\t\t\tgas: options?.gas ?? options?.gasLimit,\n\t\t\tgasPrice: options?.gasPrice,\n\t\t\tfrom: options?.from,\n\t\t\tinput: options?.input,\n\t\t\tdata: options?.data,\n\t\t};\n\n\t\tthis.syncWithContext = (options as ContractInitOptions)?.syncWithContext ?? false;\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tthis.subscribeToContextEvents(contractContext);\n\t\t}\n\t\tObject.defineProperty(this.options, 'address', {\n\t\t\tset: (value: Address) => this._parseAndSetAddress(value, returnDataFormat),\n\t\t\tget: () => this._address,\n\t\t});\n\n\t\tObject.defineProperty(this.options, 'jsonInterface', {\n\t\t\tset: (value: ContractAbi) => this._parseAndSetJsonInterface(value, returnDataFormat),\n\t\t\tget: () => this._jsonInterface,\n\t\t});\n\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tcontractContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\tthis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic setTransactionMiddleware(transactionMiddleware: TransactionMiddleware) {\n\t\tthis.transactionMiddleware = transactionMiddleware;\n\t}\n\n\tpublic getTransactionMiddleware() {\n\t\treturn this.transactionMiddleware;\n\t}\n\n\t/**\n\t * Subscribe to an event.\n\t *\n\t * ```ts\n\t * await myContract.events.MyEvent([options])\n\t * ```\n\t *\n\t * There is a special event `allEvents` that can be used to subscribe all events.\n\t *\n\t * ```ts\n\t * await myContract.events.allEvents([options])\n\t * ```\n\t *\n\t * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n\t */\n\tpublic get events() {\n\t\treturn this._events;\n\t}\n\n\t/**\n\t * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n\t *\n\t * The methods of this smart contract are available through:\n\t *\n\t * The name: `myContract.methods.myMethod(123)`\n\t * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n\t * The signature `myContract.methods['0x58cf5f10'](123)`\n\t *\n\t * This allows calling functions with same name but different parameters from the JavaScript contract object.\n\t *\n\t * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n\t *\n\t * ```ts\n\t * // calling a method\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using a promise\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using the events\n\t * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t * sendObject.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t * sendObject.on('receipt', function(receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('error', function(error, receipt) {\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n\t */\n\tpublic get methods() {\n\t\treturn this._methods;\n\t}\n\n\t/**\n\t * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n\t *\n\t * @returns - The new contract instance.\n\t *\n\t * ```ts\n\t * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n\t *\n\t * const contract2 = contract1.clone();\n\t * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n\t *\n\t * (contract1.options.address !== contract2.options.address);\n\t * > true\n\t * ```\n\t */\n\tpublic clone() {\n\t\tlet newContract: Contract<Abi>;\n\t\tif (this.options.address) {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\tthis.options.address,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t} else {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t}\n\t\tif (this.context) newContract.subscribeToContextEvents(this.context);\n\n\t\treturn newContract;\n\t}\n\n\t/**\n\t * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n\t *\n\t * ```ts\n\t * myContract.deploy({\n\t *   input: '0x12345...', // data keyword can be used, too.\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * }, function(error, transactionHash){ ... })\n\t * .on('error', function(error){ ... })\n\t * .on('transactionHash', function(transactionHash){ ... })\n\t * .on('receipt', function(receipt){\n\t *  console.log(receipt.contractAddress) // contains the new contract address\n\t * })\n\t * .on('confirmation', function(confirmationNumber, receipt){ ... })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // When the data is already set as an option to the contract itself\n\t * myContract.options.data = '0x12345...';\n\t *\n\t * myContract.deploy({\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // Simply encoding\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .encodeABI();\n\t * > '0x12345...0000012345678765432'\n\t *\n\t *\n\t * // decoding\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments\n\t * })\n\t * .decodeData('0x12345...0000012345678765432');\n\t * > {\n\t *      __method__: 'constructor',\n\t *      __length__: 2,\n\t *      '0': '123',\n\t *      _id: '123',\n\t *      '1': 'My Greeting',\n\t *      _greeting: 'My Greeting',\n\t *   }\n\t *\n\t *\n\t * // Gas estimation\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .estimateGas(function(err, gas){\n\t *   console.log(gas);\n\t * });\n\t * ```\n\t *\n\t * @returns - The transaction object\n\t */\n\tpublic deploy(deployOptions?: {\n\t\t/**\n\t\t * The byte code of the contract.\n\t\t */\n\t\tdata?: HexString;\n\t\tinput?: HexString;\n\t\t/**\n\t\t * The arguments which get passed to the constructor on deployment.\n\t\t */\n\t\targuments?: ContractConstructorArgs<Abi>;\n\t}): DeployerMethodClass<Abi> {\n\t\treturn new DeployerMethodClass(this, deployOptions);\n\t}\n\n\t/**\n\t * Gets past events for this contract.\n\t *\n\t * ```ts\n\t * const events = await myContract.getPastEvents('MyEvent', {\n\t *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n\t *   fromBlock: 0,\n\t *   toBlock: 'latest'\n\t * });\n\t *\n\t * > [{\n\t *   returnValues: {\n\t *       myIndexedParam: 20,\n\t *       myOtherIndexedParam: '0x123456789...',\n\t *       myNonIndexParam: 'My String'\n\t *   },\n\t *   raw: {\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *   },\n\t *   event: 'MyEvent',\n\t *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   logIndex: 0,\n\t *   transactionIndex: 0,\n\t *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   blockNumber: 1234,\n\t *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t * },{\n\t *   ...\n\t * }]\n\t * ```\n\t *\n\t * @param eventName - The name of the event in the contract, or `allEvents` to get all events.\n\t * @param filter - The filter options used to get events.\n\t * @param returnFormat - Return format\n\t * @returns - An array with the past event `Objects`, matching the given event name and filter.\n\t */\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tparam1?:\n\t\t\t| keyof ContractEvents<Abi>\n\t\t\t| 'allEvents'\n\t\t\t| 'ALLEVENTS'\n\t\t\t| Omit<Filter, 'address'>\n\t\t\t| ReturnFormat,\n\t\tparam2?: Omit<Filter, 'address'> | ReturnFormat,\n\t\tparam3?: ReturnFormat,\n\t): Promise<(string | EventLog)[]> {\n\t\tconst eventName: string = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n\n\t\tconst options =\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\ttypeof param1 !== 'string' && !isDataFormat(param1)\n\t\t\t\t? (param1 as Omit<Filter, 'address'>)\n\t\t\t\t: !isDataFormat(param2)\n\t\t\t\t? param2\n\t\t\t\t: {};\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnFormat = isDataFormat(param1)\n\t\t\t? param1\n\t\t\t: isDataFormat(param2)\n\t\t\t? param2\n\t\t\t: param3 ?? this.defaultReturnFormat;\n\n\t\tconst abi =\n\t\t\teventName === 'allEvents' || eventName === ALL_EVENTS\n\t\t\t\t? ALL_EVENTS_ABI\n\t\t\t\t: (this._jsonInterface.find(\n\t\t\t\t\t\tj => 'name' in j && j.name === eventName,\n\t\t\t\t  ) as AbiEventFragment & { signature: string });\n\n\t\tif (!abi) {\n\t\t\tthrow new Web3ContractError(`Event ${String(eventName)} not found.`);\n\t\t}\n\n\t\tconst { fromBlock, toBlock, topics, address } = encodeEventABI(\n\t\t\tthis.options,\n\t\t\tabi,\n\t\t\toptions ?? {},\n\t\t);\n\n\t\tconst logs = await getLogs(this, { fromBlock, toBlock, topics, address }, returnFormat);\n\t\tconst decodedLogs = logs\n\t\t\t? logs.map(log =>\n\t\t\t\t\ttypeof log === 'string'\n\t\t\t\t\t\t? log\n\t\t\t\t\t\t: decodeEventABI(abi, log as LogsInput, this._jsonInterface, returnFormat),\n\t\t\t  )\n\t\t\t: [];\n\n\t\tconst filter = options?.filter ?? {};\n\t\tconst filterKeys = Object.keys(filter);\n\n\t\tif (filterKeys.length > 0) {\n\t\t\treturn decodedLogs.filter(log => {\n\t\t\t\tif (typeof log === 'string') return true;\n\n\t\t\t\treturn filterKeys.every((key: string) => {\n\t\t\t\t\tif (Array.isArray(filter[key])) {\n\t\t\t\t\t\treturn (filter[key] as Numbers[]).some(\n\t\t\t\t\t\t\t(v: Numbers) =>\n\t\t\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\t\t\tString(v).toUpperCase(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst inputAbi = abi.inputs?.filter(input => input.name === key)[0];\n\t\t\t\t\tif (inputAbi?.indexed && inputAbi.type === 'string') {\n\t\t\t\t\t\tconst hashedIndexedString = keccak256(filter[key] as string);\n\t\t\t\t\t\tif (hashedIndexedString === String(log.returnValues[key])) return true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\tString(filter[key]).toUpperCase()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn decodedLogs;\n\t}\n\n\tprivate _parseAndSetAddress(\n\t\tvalue?: Address,\n\t\treturnFormat: DataFormat = this.defaultReturnFormat,\n\t) {\n\t\tthis._address = value\n\t\t\t? toChecksumAddress(format({ format: 'address' }, value, returnFormat))\n\t\t\t: value;\n\t}\n\n\tpublic decodeMethodData(data: HexString): DecodedParams & { __method__: string } {\n\t\tconst methodSignature = data.slice(0, 10);\n\t\tconst functionsAbis = this._jsonInterface.filter(j => j.type !== 'error');\n\n\t\tconst abi = functionsAbis.find(\n\t\t\ta => methodSignature === encodeFunctionSignature(jsonInterfaceMethodToString(a)),\n\t\t);\n\t\tif (!abi) {\n\t\t\tthrow new Web3ContractError(\n\t\t\t\t`The ABI for the provided method signature ${methodSignature} was not found.`,\n\t\t\t);\n\t\t}\n\t\treturn decodeFunctionCall(abi, data);\n\t}\n\n\tprivate _parseAndSetJsonInterface(\n\t\tabis: ContractAbi,\n\t\treturnFormat: DataFormat = this.defaultReturnFormat,\n\t) {\n\t\tthis._functions = {};\n\t\tthis._methods = {} as ContractMethodsInterface<Abi>;\n\t\tthis._events = {} as ContractEventsInterface<Abi>;\n\n\t\tlet result: ContractAbi = [];\n\n\t\tconst functionsAbi = abis.filter(abi => abi.type !== 'error');\n\t\tconst errorsAbi = abis.filter(abi =>\n\t\t\tisAbiErrorFragment(abi),\n\t\t) as unknown as AbiErrorFragment[];\n\n\t\tfor (const a of functionsAbi) {\n\t\t\tconst abi: Mutable<AbiFragment & { signature: HexString }> = {\n\t\t\t\t...a,\n\t\t\t\tsignature: '',\n\t\t\t};\n\n\t\t\tif (isAbiFunctionFragment(abi)) {\n\t\t\t\tconst methodName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst methodSignature = encodeFunctionSignature(methodName);\n\t\t\t\tabi.methodNameWithInputs = methodName;\n\t\t\t\tabi.signature = methodSignature;\n\n\t\t\t\t// make constant and payable backwards compatible\n\t\t\t\tabi.constant =\n\t\t\t\t\tabi.stateMutability === 'view' ||\n\t\t\t\t\tabi.stateMutability === 'pure' ||\n\t\t\t\t\tabi.constant;\n\n\t\t\t\tabi.payable = abi.stateMutability === 'payable' || abi.payable;\n\t\t\t\tthis._overloadedMethodAbis.set(abi.name, [\n\t\t\t\t\t...(this._overloadedMethodAbis.get(abi.name) ?? []),\n\t\t\t\t\tabi,\n\t\t\t\t]);\n\t\t\t\tconst abiFragment = this._overloadedMethodAbis.get(abi.name) ?? [];\n\t\t\t\tconst contractMethod = this._createContractMethod<\n\t\t\t\t\ttypeof abiFragment,\n\t\t\t\t\tAbiErrorFragment\n\t\t\t\t>(abiFragment, errorsAbi);\n\n\t\t\t\tconst exactContractMethod = this._createContractMethod<\n\t\t\t\t\ttypeof abiFragment,\n\t\t\t\t\tAbiErrorFragment\n\t\t\t\t>(abiFragment, errorsAbi, true);\n\n\t\t\t\tthis._functions[methodName] = {\n\t\t\t\t\tsignature: methodSignature,\n\t\t\t\t\tmethod: exactContractMethod,\n\t\t\t\t};\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[abi.name as keyof ContractMethodsInterface<Abi>] =\n\t\t\t\t\tcontractMethod as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodName as keyof ContractMethodsInterface<Abi>] =\n\t\t\t\t\texactContractMethod as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodSignature as keyof ContractMethodsInterface<Abi>] =\n\t\t\t\t\texactContractMethod as never;\n\t\t\t} else if (isAbiEventFragment(abi)) {\n\t\t\t\tconst eventName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst eventSignature = encodeEventSignature(eventName);\n\t\t\t\tconst event = this._createContractEvent(abi, returnFormat);\n\t\t\t\tabi.signature = eventSignature;\n\n\t\t\t\tif (!(eventName in this._events) || abi.name === 'bound') {\n\t\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\t\tthis._events[eventName as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t}\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[abi.name as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[eventSignature as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t}\n\n\t\t\tresult = [...result, abi];\n\t\t}\n\n\t\tthis._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n\t\tthis._jsonInterface = [...result] as unknown as ContractAbiWithSignature;\n\t\tthis._errorsInterface = errorsAbi;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _getAbiParams(abi: AbiFunctionFragment, params: unknown[]): Array<unknown> {\n\t\ttry {\n\t\t\treturn validatorUtils.transformJsonDataToAbiFormat(abi.inputs ?? [], params);\n\t\t} catch (error) {\n\t\t\tthrow new Web3ContractError(\n\t\t\t\t`Invalid parameters for method ${abi.name}: ${(error as Error).message}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _createContractMethod<T extends AbiFunctionFragment[], E extends AbiErrorFragment>(\n\t\tabiArr: T,\n\t\terrorsAbis: E[],\n\t\texact = false, // when true, it will only match the exact method signature\n\t): ContractBoundMethod<T[0]> {\n\t\tconst abi = abiArr[abiArr.length - 1];\n\t\treturn (...params: unknown[]) => {\n\t\t\tlet abiParams!: Array<unknown>;\n\t\t\tconst abis =\n\t\t\t\t(exact\n\t\t\t\t\t? this._overloadedMethodAbis\n\t\t\t\t\t\t\t.get(abi.name)\n\t\t\t\t\t\t\t?.filter(_abi => _abi.signature === abi.signature)\n\t\t\t\t\t: this._overloadedMethodAbis.get(abi.name)) ?? [];\n\t\t\tlet methodAbi: AbiFunctionFragment = abis[0];\n\t\t\tconst internalErrorsAbis = errorsAbis;\n\n\t\t\tconst arrayOfAbis: AbiFunctionFragment[] = abis.filter(\n\t\t\t\t_abi => (_abi.inputs ?? []).length === params.length,\n\t\t\t);\n\n\t\t\tif (abis.length === 1 || arrayOfAbis.length === 0) {\n\t\t\t\tabiParams = this._getAbiParams(methodAbi, params);\n\t\t\t\tvalidator.validate(abi.inputs ?? [], abiParams);\n\t\t\t} else {\n\t\t\t\tconst errors: Web3ValidationErrorObject[] = [];\n\n\t\t\t\t// all the methods that have is valid for the given inputs\n\t\t\t\tconst applicableMethodAbi: AbiFunctionFragment[] = [];\n\t\t\t\tfor (const _abi of arrayOfAbis) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tabiParams = this._getAbiParams(_abi, params);\n\t\t\t\t\t\tvalidator.validate(\n\t\t\t\t\t\t\t_abi.inputs as unknown as ValidationSchemaInput,\n\t\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tapplicableMethodAbi.push(_abi);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\terrors.push(e as Web3ValidationErrorObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (applicableMethodAbi.length === 1) {\n\t\t\t\t\t[methodAbi] = applicableMethodAbi; // take the first item that is the only item in the array\n\t\t\t\t} else if (applicableMethodAbi.length > 1) {\n\t\t\t\t\t[methodAbi] = applicableMethodAbi; // take the first item in the array\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Multiple methods found that is compatible with the given inputs.\\n\\tFound ${\n\t\t\t\t\t\t\tapplicableMethodAbi.length\n\t\t\t\t\t\t} compatible methods: ${JSON.stringify(\n\t\t\t\t\t\t\tapplicableMethodAbi.map(\n\t\t\t\t\t\t\t\tm =>\n\t\t\t\t\t\t\t\t\t`${\n\t\t\t\t\t\t\t\t\t\t(m as { methodNameWithInputs: string }).methodNameWithInputs\n\t\t\t\t\t\t\t\t\t} (signature: ${(m as { signature: string }).signature})`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)} \\n\\tThe first one will be used: ${\n\t\t\t\t\t\t\t(methodAbi as { methodNameWithInputs: string }).methodNameWithInputs\n\t\t\t\t\t\t}`,\n\t\t\t\t\t);\n\t\t\t\t\t// TODO: 5.x Should throw a new error with the list of methods found.\n\t\t\t\t\t// Related issue: https://github.com/web3/web3.js/issues/6923\n\t\t\t\t\t// This is in order to provide an error message when there is more than one method found that fits the inputs.\n\t\t\t\t\t// To do that, replace the pervious line of code with something like the following line:\n\t\t\t\t\t// throw new Web3ValidatorError({ message: 'Multiple methods found',  ... list of applicable methods }));\n\t\t\t\t}\n\t\t\t\tif (errors.length === arrayOfAbis.length) {\n\t\t\t\t\tthrow new Web3ValidatorError(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst methods = {\n\t\t\t\targuments: abiParams,\n\n\t\t\t\tcall: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCall(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\n\t\t\t\tsend: (options?: PayableTxOptions | NonPayableTxOptions): ContractMethodSend =>\n\t\t\t\t\tthis._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n\t\t\t\tpopulateTransaction: (\n\t\t\t\t\toptions?: PayableTxOptions | NonPayableTxOptions,\n\t\t\t\t\tcontractOptions?: ContractOptions,\n\t\t\t\t) => {\n\t\t\t\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\t\t\t\tmodifiedContractOptions = {\n\t\t\t\t\t\t...modifiedContractOptions,\n\t\t\t\t\t\tinput: undefined,\n\t\t\t\t\t\tfrom: modifiedContractOptions?.from ?? this.defaultAccount ?? undefined,\n\t\t\t\t\t};\n\t\t\t\t\tconst tx = getSendTxParams({\n\t\t\t\t\t\tabi,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\t\t\t\tcontractOptions: modifiedContractOptions,\n\t\t\t\t\t});\n\t\t\t\t\t// @ts-expect-error remove unnecessary field\n\t\t\t\t\tif (tx.dataInputFill) {\n\t\t\t\t\t\t// @ts-expect-error remove unnecessary field\n\t\t\t\t\t\tdelete tx.dataInputFill;\n\t\t\t\t\t}\n\t\t\t\t\treturn tx;\n\t\t\t\t},\n\t\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\treturnFormat: ReturnFormat = this\n\t\t\t\t\t\t.defaultReturnFormat as unknown as ReturnFormat,\n\t\t\t\t) =>\n\t\t\t\t\tthis.contractMethodEstimateGas({\n\t\t\t\t\t\tabi: methodAbi,\n\t\t\t\t\t\tparams: abiParams,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t}),\n\n\t\t\t\tencodeABI: () => encodeMethodABI(methodAbi, abiParams),\n\t\t\t\tdecodeData: (data: HexString) => decodeFunctionCall(methodAbi, data),\n\n\t\t\t\tcreateAccessList: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCreateAccessList(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\t\t\t};\n\n\t\t\tif (methodAbi.stateMutability === 'payable') {\n\t\t\t\treturn methods as PayableMethodObject<\n\t\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t\t>;\n\t\t\t}\n\t\t\treturn methods as NonPayableMethodObject<\n\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t>;\n\t\t};\n\t}\n\n\tprivate async _contractMethodCall<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getEthTxCallParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t},\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\t\ttry {\n\t\t\tconst result = await call(\n\t\t\t\tthis,\n\t\t\t\ttx,\n\t\t\t\tblock,\n\t\t\t\tthis.defaultReturnFormat as typeof DEFAULT_RETURN_FORMAT,\n\t\t\t);\n\t\t\treturn decodeFunctionReturn(abi, result);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _contractMethodCreateAccessList<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getCreateAccessListParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\treturn createAccessList(this, tx, block, this.defaultReturnFormat);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate _contractMethodSend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tinput: undefined,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\n\t\tconst transactionToSend = isNullish(this.transactionMiddleware)\n\t\t\t? sendTransaction(this, tx, this.defaultReturnFormat, {\n\t\t\t\t\t// TODO Should make this configurable by the user\n\t\t\t\t\tcheckRevertBeforeSending: false,\n\t\t\t\t\tcontractAbi: this._jsonInterface, // explicitly not passing middleware so if some one is using old eth package it will not break\n\t\t\t  })\n\t\t\t: sendTransaction(\n\t\t\t\t\tthis,\n\t\t\t\t\ttx,\n\t\t\t\t\tthis.defaultReturnFormat,\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO Should make this configurable by the user\n\t\t\t\t\t\tcheckRevertBeforeSending: false,\n\t\t\t\t\t\tcontractAbi: this._jsonInterface,\n\t\t\t\t\t},\n\t\t\t\t\tthis.transactionMiddleware,\n\t\t\t  );\n\n\t\t// eslint-disable-next-line no-void\n\t\tvoid transactionToSend.on('error', (error: unknown) => {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\t\t\t}\n\t\t});\n\t\treturn transactionToSend;\n\t}\n\n\tpublic async contractMethodEstimateGas<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t\tReturnFormat extends DataFormat,\n\t>({\n\t\tabi,\n\t\tparams,\n\t\treturnFormat,\n\t\toptions,\n\t\tcontractOptions,\n\t}: {\n\t\tabi: AbiFunctionFragment;\n\t\tparams: unknown[];\n\t\treturnFormat: ReturnFormat;\n\t\toptions?: Options;\n\t\tcontractOptions?: ContractOptions;\n\t}) {\n\t\tconst tx = getEstimateGasParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: contractOptions ?? this.options,\n\t\t});\n\t\treturn estimateGas(this, tx, BlockTags.LATEST, returnFormat ?? this.defaultReturnFormat);\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _createContractEvent(\n\t\tabi: AbiEventFragment & { signature: HexString },\n\t\treturnFormat: DataFormat = this.defaultReturnFormat,\n\t): ContractBoundEvent {\n\t\treturn (...params: unknown[]) => {\n\t\t\tconst { topics, fromBlock } = encodeEventABI(\n\t\t\t\tthis.options,\n\t\t\t\tabi,\n\t\t\t\tparams[0] as EventParameters,\n\t\t\t);\n\t\t\tconst sub = new ContractLogsSubscription(\n\t\t\t\t{\n\t\t\t\t\taddress: this.options.address,\n\t\t\t\t\ttopics,\n\t\t\t\t\tabi,\n\t\t\t\t\tjsonInterface: this._jsonInterface,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tsubscriptionManager: this.subscriptionManager as Web3SubscriptionManager<\n\t\t\t\t\t\tunknown,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[key: string]: Web3SubscriptionConstructor<unknown>;\n\t\t\t\t\t\t}\n\t\t\t\t\t>,\n\t\t\t\t\treturnFormat,\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!isNullish(fromBlock)) {\n\t\t\t\t// emit past events when fromBlock is defined\n\t\t\t\tthis.getPastEvents(abi.name, { fromBlock, topics }, returnFormat)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tif (logs) {\n\t\t\t\t\t\t\tlogs.forEach(log => sub.emit('data', log as EventLog));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error: Error) => {\n\t\t\t\t\t\tsub.emit(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\tnew SubscriptionError('Failed to get past events.', error),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tthis.subscriptionManager?.addSubscription(sub).catch((error: Error) => {\n\t\t\t\tsub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n\t\t\t});\n\n\t\t\treturn sub;\n\t\t};\n\t}\n\n\tprotected subscribeToContextEvents<T extends Web3Context>(context: T): void {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst contractThis = this;\n\t\tthis.context = context;\n\n\t\tif (contractThis.syncWithContext) {\n\t\t\tcontext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\tcontractThis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}